[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stock Synthesis (SS3) Website",
    "section": "",
    "text": "Welcome to the Stock Synthesis website!\nIf you are a new SS3 user, please see the Section 5 and the Section 5.1 sections as well as the SS3 User Manual.\nWe have a new SS3 User Forum Google Group. Please let us know your institution and why you want to join the user group in your request to join."
  },
  {
    "objectID": "index.html#webinar-and-office-hours",
    "href": "index.html#webinar-and-office-hours",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Webinar and Office Hours",
    "text": "Webinar and Office Hours\n\nThe next SS3 Webinar is TBD but will be on the Impact of time-varying biology on reference points in SS3.\nAdd SS3 Webinar and Office Hours Calendar to your calendar"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Introduction",
    "text": "Introduction\nStock Synthesis (SS3) is an age- and size-structured stock assessment model in the class of models termed integrated analysis. Stock Synthesis has evolved over time to be able to model a wide range of fish population dynamics and somatic growth and to utilize diverse types of data. The model is coded in C++ with parameter estimation enabled by automatic differentiation though AD Model Builder ADMB (Fournier et al. 2012).\nSS3 is made up of\n\nA population sub-model that simulates the following population processes:\n\nbiology (growth, maturity, fecundity),\nrecruitment,\nmovement,\nfishery selectivity\nnatural and fishing mortality, and\nresponsiveness to environmental and predation factors.\n\nAn observation sub-model that estimates expected values for various types of data.\nA statistical sub-model that characterizes the data’s goodness of fit and obtains best-fitting parameters with associated variance.\nA forecast sub-model that projects management quantities.\n\nThe equations behind the basic features of SS3 can be found in Appendix A of Methot and Wetzel (2013) (link to PDF of paper).\nThere are 100+ stocks in the US and throughout the world that use SS3 for which we have provided many national, international, and web-based trainings. Additionally, we have a very active user-base that contributes heavily to SS3 and the associated R packages as well as participates in the online discussions and forums."
  },
  {
    "objectID": "index.html#installing-the-stock-synthesis-latest-release",
    "href": "index.html#installing-the-stock-synthesis-latest-release",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Installing the Stock Synthesis latest release",
    "text": "Installing the Stock Synthesis latest release\n Download the latest release of the Stock Synthesis executable."
  },
  {
    "objectID": "index.html#change-logs",
    "href": "index.html#change-logs",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Change logs",
    "text": "Change logs\nTo see the changes made in the latest release of Stock Synthesis, please see the change log on GitHub that shows all changes from v.3.30.19 onward. To see the change log for v.3.30.00 to v.3.30.20, please download this Excel spreadsheet. For the change log for v.3.24, please see this Excel spreadsheet and the Readme on the historical SS3 change logs."
  },
  {
    "objectID": "index.html#sec-startSS3",
    "href": "index.html#sec-startSS3",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Getting Started with Stock Synthesis",
    "text": "Getting Started with Stock Synthesis\nTo get started with Stock Synthesis, please see the presentation below and the Getting Started with Stock Synthesis Tutorial:\n\n\n\n\n\n\n\n\n\n\nGetting Started Using the Stock Assessment Continuum Tool\nIf you are just getting started with Stock Synthesis, we highly recommend downloading the Stock Assessment Continuum Tool, a shiny app (pictured below) where users can provide data and life-history information to create the Stock Synthesis input files, run the model, and produce plots and tables via the {r4ss} package. \n\n\nGetting Started Using the Input Files\nTo learn more about how to build your own models in Stock Synthesis using the input files directly, see the Develop a Stock Synthesis model guide.\n\n\nInteracting with Stock Synthesis and Viewing Output Using {r4ss}\n\n\n\n\n\nThe {r4ss} package is a collection of R functions for interacting with Stock Synthesis. These functions include downloading the executable, changing model input, running the model, and creating an assortment of plots and tables. More information about using {r4ss} is available in the “Introduction to r4ss” vignette. Furthermore, you can navigate to these example plots that were created using {r4ss} for the Big Skate model, which can be found in the ss3-test-models repository.\n\n\nUser Example Models\nWe maintain a GitHub repository of example stock synthesis models for users. Information on what the key features of the user example models are and how to download them can be found in the SS3 user examples repository."
  },
  {
    "objectID": "index.html#asking-questions-about-stock-synthesis",
    "href": "index.html#asking-questions-about-stock-synthesis",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Asking questions about Stock Synthesis",
    "text": "Asking questions about Stock Synthesis\nPlease look for answers or submit questions to the Stock Synthesis Google Group (must request to join first). Questions can also be asked by opening an issue or posting a discussion in the ss3-source-code repository, or by emailing nmfs.stock.synthesis@noaa.gov."
  },
  {
    "objectID": "index.html#contributing-to-stock-synthesis",
    "href": "index.html#contributing-to-stock-synthesis",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Contributing to Stock Synthesis",
    "text": "Contributing to Stock Synthesis\nHave feature requests or bug reports? Want to contribute code? Please open an issue. If you are able to contribute code to fix the issue or add a feature, then the SS3 Team will communicate with you after which you will be able to submit a pull request from your fork of the repository to be reviewed by the SS3 Team. Even Team members cannot directly contribute to the ss3-source-code without a pull request. For complete details, please see CONTRIBUTING.md\nThis project and everyone participating in it is governed by the National Marine Fisheries Service (NMFS) Fisheries Toolbox Code of Conduct. By participating, you are expected to uphold this code."
  },
  {
    "objectID": "index.html#tools-for-working-with-stock-synthesis",
    "href": "index.html#tools-for-working-with-stock-synthesis",
    "title": "Stock Synthesis (SS3) Website",
    "section": "Tools for working with Stock Synthesis",
    "text": "Tools for working with Stock Synthesis\nAs Stock Synthesis usage has grown so has the number of tools to work with it. These include repositories on GitHub with the stock-synthesis topic, some of which are listed below, as well as some of the following tools found in other locations:\n\nr4ss: Create plots and tables of Stock Synthesis output and functions to work with Stock Synthesis in R.\nss3diags: Run advanced diagnostics for Stock Synthesis models.\nss3sim: Conduct simulation studies using Stock Synthesis.\nSSMSE: Use Stock Synthesis operating models in Management Strategy Evaluation.\nsa4ss: Create accessible R markdown stock assessment documents with results from Stock Synthesis models. Note this tool is intended for use by analysts within the Northwest and Southwest Fisheries Science Centers currently.\nData limited tools:\n\nSimple Stock Synthesis (SSS)\nExtended Simple Stock Synthesis (XSSS)\nStock Assessment Continuum Tool (previously the SS-DL-tool), a shiny app that includes XSSS and SSS in its functionality.\n\nSS3 Shiny helper app: Visualize a couple common selectivity pattern options available within Stock Synthesis.\nSSI: Stock Synthesis Interface, a GUI for developing models and running Stock Synthesis which links to {r4ss}. Note that SSI is not supported for versions of Stock Synthesis beyond v.3.30.21.\n\nHave a tool to work with Stock Synthesis that should also be mentioned? Open an issue in the ss3-website repository to let us know!"
  },
  {
    "objectID": "index.html#how-to-cite-stock-synthesis",
    "href": "index.html#how-to-cite-stock-synthesis",
    "title": "Stock Synthesis (SS3) Website",
    "section": "How to Cite Stock Synthesis",
    "text": "How to Cite Stock Synthesis\nPlease cite Stock Synthesis as:\nMethot, R.D. and Wetzel, C.R. (2013). Stock Synthesis: A biological and statistical framework \nfor fish stock assessment and fishery management. Fisheries Research, 142: 86-99.\nhttps://doi.org/10.1016/j.fishres.2012.10.012\nThe following BibTeX entry can be copied and used in a .bib file:\n@article{methotwetzel2013,\n  title={Stock Synthesis: A biological and statistical framework for fish stock assessment \n  and fishery management},\n  author={Richard Donald {Methot, Jr.} and Chantell R. Wetzel},\n  year={2013}, \n  journal={Fisheries Research},\n  volume={142},\n  pages={86--99},\n  doi={10.1016/j.fishres.2012.10.012},\n}\nTo see how to cite the Stock Synthesis User Manual, please refer to the SS3 User Manual guidance."
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Stock Synthesis (SS3) Website",
    "section": "References",
    "text": "References\n\n\nFournier, David A., Hans J. Skaug, Johnoel Ancheta, James Ianelli, Arni Magnusson, Mark N. Maunder, Anders Nielsen, and John Sibert. 2012. “AD Model Builder: Using Automatic Differentiation for Statistical Inference of Highly Parameterized Complex Nonlinear Models.” Optimization Methods and Software 27 (2): 233–49. https://doi.org/10.1080/10556788.2011.597854.\n\n\nMethot, Richard D., and Chantell R. Wetzel. 2013. “Stock Synthesis: A Biological and Statistical Framework for Fish Stock Assessment and Fishery Management.” Fisheries Research 142 (May): 86–99. https://doi.org/10.1016/j.fishres.2012.10.012.\n\n\n\nU.S. Department of Commerce | National Oceanographic and Atmospheric Administration | NOAA Fisheries"
  },
  {
    "objectID": "qmds/settlement_timing.html",
    "href": "qmds/settlement_timing.html",
    "title": "Settlement Timing",
    "section": "",
    "text": "Settlement timing in SS3 can be used simply, but there is a rich range of options to provide a high degree of flexibility to cover edge cases."
  },
  {
    "objectID": "qmds/settlement_timing.html#spawning-and-settlement",
    "href": "qmds/settlement_timing.html#spawning-and-settlement",
    "title": "Settlement Timing",
    "section": "Spawning and Settlement",
    "text": "Spawning and Settlement\n\nSpawning\nThere is one and only one spawning event in each year. It is assigned a real valued spawn_month and the numbers-at-age (NAA) at the time of spawning are decayed to that date according to \\(exp(-(M+F))\\) from the start date of the season this date occurs in.\n\n\nSettlement\nThere can be one to many settlement events and the total recruits (\\(exp(ln(R0))\\)) are distributed among these events according to the recruitment distribution pattern and associated distribution parameters. Each settlement event is characterized by:\n\nGrowth pattern - which set of biological parameters apply to this partition of the total recruits\nSettlement month - in real months, so 1.0 means Jan 1 and 4.5 means settlement on April 15.\n\nSettlement area - in which area is this settlement occurring\nSettlement age - SS3 expects that settlement age is 0 if in the same year as spawning and 1 if in the following year.\n\nThe settlement age entry allows this to be overridden by the user. The calendar age of the recruits is a real number which equals “settlement age” on January 1 of the spawning year (even if spawning happens later in the year).\n\n\n\n\n\n\nNote\n\n\n\nIf settlement age is greater than 0, then settlement month needs to be adjusted in 12 month increments to align with that advanced age at settlement. Instructions in the SS3 manual need updating as a result of this discovery."
  },
  {
    "objectID": "qmds/settlement_timing.html#example-scenarios",
    "href": "qmds/settlement_timing.html#example-scenarios",
    "title": "Settlement Timing",
    "section": "Example Scenarios",
    "text": "Example Scenarios\nBelow are a set of examples with a strong recruitment (recdev = 2.0) resulting from the 1977 spawning, hence named Main_RecrDev_1977.\nThe various examples will show how this interacts with the settlement event setup.\n\nExample 1: December spawning, January settlement\nA common setup will have spawning late in one year (for this example December 1, or month 12.0) and one settlement event at age 0 the following year (for this example January 1, or month 1.0).\n#| code-overflow: wrap\n12 #_spawn_month\n#GPattern month  area  age (for each settlement assignment)\n 1 1 1 0\nIn the spawn_recruitment output table, this results in 61154.1 thousand recruits from the 1977 spawning.\n#| code-overflow: wrap\nYr SpawnBio exp_recr with_regime bias_adjusted pred_recr dev\n1977 75541.9  9908.54 9908.54 8276.31 61154.1 2.0\nIn the NAA table, these recruits are split to be 30577.1 NAA 0 in 1978 for each of females and males. They appear in 1978 as age 0 fish because their settlement month (1.0) is earlier than their spawning month (12.0), so settlement must be in the year following spawning.\nSS3 produces this note in warnings.sso:\n#| code-overflow: wrap\nNote 3 Information: settle_month is less than spawn_month, so logical age at settlement calculated to be: 1 for settle_time 1 does not match read value of 0 are you sure?\nSwitching settlement age to 1 resolves the warning and now the fish first appear in the NAA table as age 1 fish in 1978. Age 0 fish never appear in the NAA table with this configuration.\n\n\n\nExample 2: January spawning, January settlement\nShift spawning to occur on January 1 and virtual recruitment at the same time, 1.0. Spawning biomass is higher on January 1 of 1977 than December 1 of 1977, as a result the recruitment is higher (note that the model was not re-estimated to allow for \\(ln(R_{0})\\) to come into alignment with the spawn month).\nYr SpawnBio exp_recr with_regime bias_adjusted pred_recr dev\n1977 80997  9935.39 9935.39 8298.73 61319.8 2.0 \nThese fish appear in the NAA table in 1977, not 1978 because the settlement date (1.0) is not smaller than the spawning date (also 1.0).\n\n\nExample 3: January spawning, March settlement\nSpawning on January 1 and settlement on March 1 (month 3.0).\nSpawn_recr table shows recruits in 1977 as 61328.1. Which will be 30664.05 per sex.\nThese fish appear in the NAA table in 1977 at age 0. They have elevated numbers (31179.4) because the table contains their numbers at the beginning of the season inflated by \\(exp(M*deltaT)\\), whereas \\(ln(R_{0})\\) references their numbers at the time of settlement, which is 2 months later.\n\n\nExample 4: March spawning\nSpawning on March 1 and settlement on March 15 at age 0.\nThis is an non-allowed configuration because the recruits must be backed up to the beginning of the season (January 1) where they potentially could be part of the spawning biomass of March 1 that produced them.\nSS3 produces this warning:\nWarning 1 Fatal Error! Cannot have spawn_time_seas after beginning of a season and settlements in the same season.  Put spawning at beginning of the season, or move settlements to next season\nSpawning on Mar 1 and settlement on Feb 1  at age 0.  \nNote 3 Information: settle_month is less than spawn_month, so logical age at settlement calculated to be: 1  for settle_time 1.  Does not match read value of 0 are you sure? \nSpawning on Mar 1 and settlement on Feb 1  at age 1.  No warning is produced.  The big yearclass shows up in NAA at age 1 in 1978.\n\n\nExample 5: February spawning, May settlement (OK if split across seasons)\nSpawning on February 1 and settlement on May 1 at age 0, with 2 seasons (January-March, April-December). This is legal because the May 1 settlement now is just backed up to April 1 which is after the spawning event that occurred in the previous season.\n\n\nExample 6: February spawn, January settle of following year at age 1\nIn this example, the big 1977 recruitment will show up in the NAA table at age 1 in the following year, 1978.\nIf spawning had been set to month 1.0, then SS3 would allow the Jan 1 settlement at age 1 to occur in 1977 also. This is a year off and illogical.\nHowever, with spawning at month 1.0, settlement at month 13.0, and settlement age at 1.0, then the big recruitment correctly shows up in 1978 at age 1. So, it is critical to think about the timing of spawning relative to settlement and to check results in the NAA table."
  },
  {
    "objectID": "qmds/settlement_timing.html#example-set-ups",
    "href": "qmds/settlement_timing.html#example-set-ups",
    "title": "Settlement Timing",
    "section": "Example Set-ups",
    "text": "Example Set-ups\n\nExample set-up 1\nA single recruitment event is now split among 3 events happening in April, May and June; all with the same growth parameters. Previously, the data indicated that the CV of length-at-age for young fish was rather larger. But that conclusion was linked to the assumption that all the recruits were exactly the same age. In the revised setup, the recruits now have a spread of age since settlement, so at a point in time they will have a spread of lengths. Consequently, it is expected that the CV parameter for young fish can be less when recruits are distributed among a spread of temporal settlement events.\n\n\nExample set-up 2\nSpawning is in October and recruitment occurs with two settlement events. One settlement is in December and the settlement age is 0. The other settlement is in February and the settlement age is 1. The first settlement will graduate to age 1 on January 1, so by February when the second settlement occurs, they both will appear as the same integer age.\nThe total number of recruits is scaled by the parameter \\(ln(R_{0})\\). Even when this total is divided among morphs, sexes, and settlement events at different times, the total of all those settlement events will be equal to \\(exp(ln(R_{0}))\\). However, settlers are always added at the beginning of a season because they will experience mortality throughout the season. This means that when a settlement event happens not at the beginning of a season, its initial numbers are adjusted upwards such that after in-season mortality occurs its numbers at the assigned time of settlement will be correct. This is a benign process if only natural mortality is acting on the pre-settlement fish. However, if fishing mortality is also active, then it would be better to create more seasons such that the settlement event could then occur at the beginning of a season and have its fishing mortality more explicitly under control.\nFor the purpose of growth calculation, fish have a real_age of 0.0 at the time of settlement, so each settlement timing has a unique starting point for real_age, unlike calendar_age which is relative to January 1 of the spawn year. All fish graduate to the next integer age on January 1. Real_age is used as the basis for growth, and for some types of age-specific natural mortality. This means that when fish of the same growth pattern are distributed among more than one settlement timing, the early born fish have a head start in the growth process, but since they are all growing towards the same maximum size, they gradually converge in growth. Conceptually, the time between spawning and settlement is a larval phase that is post spawner-recruitment and pre-settlement. They are in a planktonic limbo until settling. Where, when, and what growth type they have upon settlement is controlled by the recruitment distribution. Then upon settling, the juvenile fish begin growing according to adult growth parameters and enter exposure to explicit natural and fishing mortality.\nGrowth - Fish begin growing according to the growth curve when they reach the real_age equal to the user-assigned quantity, \\(A_{min}\\). At the \\(real\\_age = Amin\\), fish have the mean body length of \\(L_{min}\\). \\(A_{min}\\) is in terms of real_age post-settlement, not calendar_age post January 1 of the spawning year. \\(A_{min}\\) can have a value of 0.0, especially if the time of settlement is several months post-spawning. If \\(A_{min}\\) is &gt;0.0, then size-at-age of fish is assigned according to a linearly interpolated fraction of \\(L_{min}\\). If you are using age-specific \\(K\\), then the integer age measured starting from the spawn year is used to select an age-specific \\(K\\) change.\nGrowth parameters - If you have growth parameters calculated externally to SS3, they probably are relative to age being measured in terms of calendar age, not real-age post settlement. The growth \\(K\\) and \\(L_{max}\\) parameters will be unaffected, but \\(L_{min}\\) very much depends on the shifting along the age axis."
  },
  {
    "objectID": "qmds/richards_growth_curve.html",
    "href": "qmds/richards_growth_curve.html",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "",
    "text": "The equations used in the Stock Synthesis implementation of the Richards curve, as found in the ADMB source code, are different from the equations in the Stock Synthesis User Manual (Methot et al. 2024). This vignette (1) shows that the equations are equivalent and (2) demonstrates the various shapes of the Richards curve using different values for the \\(k\\) and \\(b\\) parameters."
  },
  {
    "objectID": "qmds/richards_growth_curve.html#introduction",
    "href": "qmds/richards_growth_curve.html#introduction",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "",
    "text": "The equations used in the Stock Synthesis implementation of the Richards curve, as found in the ADMB source code, are different from the equations in the Stock Synthesis User Manual (Methot et al. 2024). This vignette (1) shows that the equations are equivalent and (2) demonstrates the various shapes of the Richards curve using different values for the \\(k\\) and \\(b\\) parameters."
  },
  {
    "objectID": "qmds/richards_growth_curve.html#methods",
    "href": "qmds/richards_growth_curve.html#methods",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "Methods",
    "text": "Methods\nInstall and load the r4ss package, so we can import Stock Synthesis model output.\n\nremotes::install_github(\"r4ss/r4ss\")\nlibrary(r4ss)\n\n\nParameter definitions\nThe Richards growth model has four parameters:\n\\(L_1\\): length at age \\(A_1\\)\n\\(L_2\\): length at age \\(A_2\\)\n\\(k\\): growth coefficient\n\\(b\\): shape parameter\n\nand three input variables:\n\\(t\\): age\n\\(A_1\\): young age selected by user, for the estimation of \\(L_1\\)\n\\(A_2\\): old age selected by user, for the estimation of \\(L_2\\)\n\n\nSS3 Code\nThe following R function replicates the Richards growth implementation from the Stock Synthesis ADMB source code.\n\nss3_code &lt;- function(t, L1, L2, k, b, A1, A2)\n{\n  LminR &lt;- L1^b\n  LmaxR &lt;- L2^b\n  LinfR &lt;- LminR + (LmaxR - LminR) / (1 - exp(-k*(A2-A1)))\n  temp &lt;- LinfR + (LminR - LinfR) * exp(-k*(t-A1))\n  temp^(1/b)\n}\n\n\n\nSchnute\nThe Schnute parametrization of the Richards curve is from Schnute (1981) (Eq. 15, case 1).\n\nschnute &lt;- function(t, L1, L2, k, b, A1, A2)\n{\n  (L1^b + (L2^b-L1^b) * (1-exp(-k*(t-A1))) / (1-exp(-k*(A2-A1))))^(1/b)\n}\n\n\n\nvon Bertalanffy\nThe reparametrized von Bertalanffy function is from Schnute and Fournier (1980) (Eq. 7).\n\nvon_bertalanffy &lt;- function(t, L1, L2, k, A1, A2)\n{\n  L1 + (L2-L1) * (1-exp(-k*(t-A1))) / (1-exp(-k*(A2-A1)))\n}\n\n\n\nGompertz\nFinally, a standard Gompertz function is found in Schnute (1981) (Eq. 2).\n\ngompertz &lt;- function(t, Linf, tau)\n{\n  Linf * exp(-exp(-k*(t-tau)))\n}"
  },
  {
    "objectID": "qmds/richards_growth_curve.html#results",
    "href": "qmds/richards_growth_curve.html#results",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "Results",
    "text": "Results\n\nStock Synthesis model output\n\n\n Download Richards example SS3 input files\n\n\n\n\nRead estimated growth parameters from a fitted Stock Synthesis model.\n\n# dir = the file path to the directory above where the example files are downloaded\nmodel &lt;- r4ss::SS_output(file.path(dir, \"simple_small_richards\"))\nA1 &lt;- subset(model$Growth_Parameters, Sex==1, A1, drop=TRUE)\nA2 &lt;- subset(model$Growth_Parameters, Sex==1, A2, drop=TRUE)\nL1 &lt;- subset(model$Growth_Parameters, Sex==1, L_a_A1, drop=TRUE)\nL2 &lt;- subset(model$Growth_Parameters, Sex==1, L_a_A2, drop=TRUE)\nk &lt;- subset(model$Growth_Parameters, Sex==1, K, drop=TRUE)\nb &lt;- model$parameters[\"Richards_Fem_GP_1\", \"Value\"]\nLinf &lt;- subset(model$Growth_Parameters, Sex==1, Linf, drop=TRUE)\n\nCompare three growth curves: length-at-age reported in the Stock Synthesis output, predicted lengths using the ss3_code() function, and predicted lengths using the schnute() function.\n\nt &lt;- 0:20\nplot(Len_Beg~Age_Beg, model$endgrowth, subset=Sex==1, ylim=c(0,80),\n     xlab=\"age\", ylab=\"length\", type=\"l\", lwd=1.5, col=2)\npoints(t, ss3_code(t, L1, L2, k, b, A1, A2))\npoints(t, schnute(t, L1, L2, k, b, A1, A2), pch=3)\nlegend(\"bottomright\", c(\"ss_output\", \"ss3_code\", \"schnute\"),\n       pch=c(NA, 1, 3), lty=c(1, NA, NA), lwd=c(1.5, NA, NA),\n       col=c(2, 1, 1), bty=\"n\", inset=0.02, y.intersp=1.5)\n\n\n\n\n\n\n\n\nThe predicted length from the ss3_code() and schnute() functions are in perfect agreement with each other. They are the same predicted lengths as reported in the Stock Synthesis output, except for the oldest age which is treated as a plus group inside the model, containing age 20 and older.\n\ncomparison &lt;- data.frame(\n  age = t,\n  ss3_output = subset(model$endgrowth, Sex==1, Len_Beg, drop=TRUE),\n  ss3_code = ss3_code(t, L1, L2, k, b, A1, A2),\n  schnute = schnute(t, L1, L2, k, b, A1, A2)\n)\nprint(comparison, row.names=FALSE)\n\n age ss3_output ss3_code  schnute\n   0    22.7690 22.76900 22.76900\n   1    39.3016 39.30161 39.30161\n   2    46.8948 46.89477 46.89477\n   3    51.9159 51.91588 51.91588\n   4    55.5968 55.59675 55.59675\n   5    58.4357 58.43566 58.43566\n   6    60.6924 60.69238 60.69238\n   7    62.5224 62.52241 62.52241\n   8    64.0274 64.02738 64.02738\n   9    65.2779 65.27789 65.27789\n  10    66.3251 66.32514 66.32514\n  11    67.2075 67.20754 67.20754\n  12    67.9547 67.95467 67.95467\n  13    68.5897 68.58973 68.58973\n  14    69.1313 69.13126 69.13126\n  15    69.5942 69.59425 69.59425\n  16    69.9909 69.99095 69.99095\n  17    70.3315 70.33147 70.33147\n  18    70.6242 70.62422 70.62422\n  19    70.8762 70.87622 70.87622\n  20    71.3850 71.09338 71.09338\n\n\n\n\nSpecial cases\nSpecial cases of the Richards curve include the von Bertalanffy (\\(b\\!=\\!1\\)) and Gompertz (\\(b\\!\\to\\!0\\)) models. In the plot below, the lines are drawn using the actual von Bertalanffy and Gompertz functions, and the circles are drawn using the Richards curve with the appropriate values for the \\(b\\) parameter.\n\nplot(NA, xlim=range(t), ylim=c(0,80), xlab=\"age\", ylab=\"length\")\nlines(t, von_bertalanffy(t, L1, L2, k, A1, A2), ylim=c(0,80), lwd=2, col=2)\npoints(t, schnute(t, L1, L2, k, 1, A1, A2), col=2)\nlines(t, gompertz(t, Linf, k), lwd=2, col=4)\nLg1 &lt;- gompertz(A1, Linf, k)\nLg2 &lt;- gompertz(A2, Linf, k)\npoints(t, schnute(t, Lg1, Lg2, k, 0.0001, A1, A2), col=4)\nlegend(\"topleft\", c(\"von Bertalanffy (b=1)\",\"Gompertz (b near 0)\"),\n       lwd=2, col=c(2,4), bty=\"n\", inset=0.02, y.intersp=1.5)\n\n\n\n\n\n\n\n\n\n\nRichards growth curves with different \\(k\\) and \\(b\\) combinations\n\nx &lt;- seq(0, 20, by=0.1)\nL1 &lt;- 5\nL2 &lt;- 80\nA1 &lt;- 0\nA2 &lt;- 20\n\nplot(NA, xlim=range(x), ylim=c(0, 80), xlab=\"age\", ylab=\"length\")\nz &lt;- rich.colors.short(6)\n\nlines(x, schnute(x, L1, L2, k=0.8,    b=-3,     A1, A2), lwd=2, col=z[1])\nlines(x, schnute(x, L1, L2, k=0.8,    b=-2,     A1, A2), lwd=2, col=z[1])\nlines(x, schnute(x, L1, L2, k=0.8,    b=-1,     A1, A2), lwd=2, col=z[1])\nlines(x, schnute(x, L1, L2, k=0.4,    b=-1,     A1, A2), lwd=2, col=z[1])\nlines(x, schnute(x, L1, L2, k=0.4,    b=0.0001, A1, A2), lwd=2, col=z[2])\nlines(x, schnute(x, L1, L2, k=0.2,    b=0.0001, A1, A2), lwd=2, col=z[2])\nlines(x, schnute(x, L1, L2, k=0.4,    b=1,      A1, A2), lwd=2, col=z[3])\nlines(x, schnute(x, L1, L2, k=0.2,    b=1,      A1, A2), lwd=2, col=z[3])\nlines(x, schnute(x, L1, L2, k=0.1,    b=1,      A1, A2), lwd=2, col=z[3])\nlines(x, schnute(x, L1, L2, k=0.2,    b=2,      A1, A2), lwd=2, col=z[4])\nlines(x, schnute(x, L1, L2, k=0.1,    b=2,      A1, A2), lwd=2, col=z[4])\nlines(x, schnute(x, L1, L2, k=0.0001, b=2,      A1, A2), lwd=2, col=z[4])\nlines(x, schnute(x, L1, L2, k=0.2,    b=3,      A1, A2), lwd=2, col=z[5])\nlines(x, schnute(x, L1, L2, k=0.1,    b=3,      A1, A2), lwd=2, col=z[5])\nlines(x, schnute(x, L1, L2, k=0.0001, b=3,      A1, A2), lwd=2, col=z[5])\nlines(x, schnute(x, L1, L2, k=0.1,    b=4,      A1, A2), lwd=2, col=z[6])\nlines(x, schnute(x, L1, L2, k=0.0001, b=4,      A1, A2), lwd=2, col=z[6])\nlines(x, schnute(x, L1, L2, k=0.0001, b=5,      A1, A2), lwd=2, col=z[6])\nlines(x, schnute(x, L1, L2, k=0.0001, b=6,      A1, A2), lwd=2, col=z[6])\n\nlegend(\"bottomright\", c(\"b: 4 to 6\", \"b: 3\", \"b: 2\", \"b: 1\", \"b: 0.001\",\n       \"b: -1 to -3\"), lwd=2.5, col=rev(z), bty=\"n\", inset=0.02, y.intersp=1.2)"
  },
  {
    "objectID": "qmds/richards_growth_curve.html#discussion",
    "href": "qmds/richards_growth_curve.html#discussion",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "Discussion",
    "text": "Discussion\n\nRange of permissible \\(b\\) values\nThe Schnute parametrization of the Richards curve used in Stock Synthesis can produce a wide variety of shapes, based on the value of the \\(b\\) parameter, as demonstrated in Section 3.3. When \\(A_1\\) is greater than the youngest age in the model, some combinations of Richards growth parameters can lead to undefined (NaN) predicted length for the younger ages. The choice of \\(A_1\\) and \\(A_2\\) will affect the possible growth curve shapes.\nThe one value of \\(b\\) that is not allowed when using the Richards growth curve in Stock Synthesis is \\(b\\!=\\!0\\). This also holds for the R functions ss3_code() and schnute() used in this vignette. When estimating \\(b\\) as a floating-point number, there is effectively no risk of the parameter becoming precisely zero during estimation, as long as the initial value is non-zero. To use a Gompertz growth curve, the \\(b\\) parameter can be fixed at a small value such as 0.0001, as demonstrated in Section 3.2.\n\n\nProof of ss3_code() being equivalent to schnute()\nThe above demonstrations comparing the Stock Synthesis output, ss3_code() and schnute() indicate that they are mathematically equivalent, meaning that the same parameter input produces the same growth curve. The equivalence can also be proven algebraically.\nIn Stock Synthesis, the Richards growth curve is implemented as\n\nss3_code &lt;- function(t, L1, L2, k, b, A1, A2)\n{\n  LminR &lt;- L1^b\n  LmaxR &lt;- L2^b\n  LinfR &lt;- LminR + (LmaxR - LminR) / (1 - exp(-k*(A2-A1)))\n  temp &lt;- LinfR + (LminR - LinfR) * exp(-k*(t-A1))\n  temp^(1/b)\n}\n\n\\[\nL_t ~=~ \\Big[\\,L_{\\infty R} \\;+\\; (L_1^b-L_{\\infty R})\\,\n         e^{-k(t-A_1)}\\,\\Big]^{1/b}\n\\]\nwhere:\n\\[L_{\\infty R} ~=~ L_1^b \\;+\\; \\frac{L_2^b\\,-\\,L_1^b}{1-e^{-k(A_2-A_1)}}\\]\nWe proceed by replacing \\(L_{\\infty R}\\) with its definition and then gradually simplify the equation:\n\\[\\begin{eqnarray*}\nL_t &=& \\bigg[\\,L_1^b \\;+\\; \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}} \\;+\\;\n         \\left(L_1^b\\,-\\,\\Big[L_1^b \\,+\\,\n         \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}}\\Big]\\right)\n         e^{-k(t-A_1)}\\,\\bigg]^{1/b}\\\\[4ex]\nL_t &=& \\bigg[\\,L_1^b \\;+\\; \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}} \\;+\\;\n         \\left(L_1^b\\,-\\, L_1^b \\,-\\, \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}}\n         \\right) e^{-k(t-A_1)}\\,\\bigg]^{1/b}\\\\[4ex]\nL_t &=& \\bigg[\\,L_1^b \\;+\\; \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}} \\;-\\;\n         \\frac{L_2^b-L_1^b}{1-e^{-k(A_2-A_1)}}\\, e^{-k(t-A_1)}\\,\\bigg]^{1/b}\\\\[4ex]\nL_t &=& \\bigg[\\,L_1^b \\;+\\; (L_2^b-L_1^b)\\,\\frac{1}{1-e^{-k(A_2-A_1)}} \\;-\\;\n         (L_2^b-L_1^b)\\,\\frac{e^{-k(t-A_1)}}{1-e^{-k(A_2-A_1)}}\\,\\bigg]^{1/b}\\\\[4ex]\nL_t &=& \\left[\\:L_1^b\\;+\\;(L_2^b-L_1^b)\\,\n         \\frac{1-e^{-k(t-A_1)}}{1-e^{-k(A_2-A_1)}}\\,\\right]^{1/b}\n\\end{eqnarray*}\\]\n\nschnute &lt;- function(t, L1, L2, k, b, A1, A2)\n{\n  (L1^b + (L2^b-L1^b) * (1-exp(-k*(t-A1))) / (1-exp(-k*(A2-A1))))^(1/b)\n}\n\n\n\nFSA package\nThe FSA package on CRAN (Ogle et al. 2023) is a useful reference to navigate through the plethora of alternative parametrizations of different growth curves. Among the FSA function calls that are relevant to this vignette are:\n\nlibrary(FSA)\nSchnute(t, case=1, ...)\nSchnute(t, case=2, ...)\n\nSchnute case 1 (Schnute 1981, Eq. 15) is the same as schnute() used in this vignette.\nSchnute case 2 (Schnute 1981, Eq. 16) is a Gompertz growth model parametrized with \\(L_1\\), \\(L_2\\), and \\(k\\), similar to ss3_code() and schnute() when \\(b\\) is fixed at nearly 0."
  },
  {
    "objectID": "qmds/richards_growth_curve.html#references",
    "href": "qmds/richards_growth_curve.html#references",
    "title": "Notes on Richards growth in Stock Synthesis",
    "section": "References",
    "text": "References\n\n\nMethot, R. D., C. R. Wetzel, I. G. Taylor, K. L. Doering, E. F. Perl, and K. F. Johnson. 2024. Stock Synthesis User Manual Version 3.30.23. https://github.com/nmfs-ost/ss3-doc/releases/v3.30.23.\n\n\nOgle, Derek H., Jason C. Doll, A. Powell Wheeler, and Alexis Dinno. 2023. FSA: Simple Fisheries Stock Assessment Methods. https://CRAN.R-project.org/package=FSA.\n\n\nSchnute, Jon. 1981. “A Versatile Growth Model with Statistically Stable Parameters.” Canadian Journal of Fisheries and Aquatic Sciences 38 (9): 1128–40. https://doi.org/10.1139/f81-153.\n\n\nSchnute, Jon, and David Fournier. 1980. “A New Approach to Length–Frequency Analysis: Growth Structure.” Canadian Journal of Fisheries and Aquatic Sciences 37 (9): 1337–51. https://doi.org/10.1139/f80-172."
  },
  {
    "objectID": "qmds/ss3_setup_decisions.html",
    "href": "qmds/ss3_setup_decisions.html",
    "title": "Important SS3 Set-up Decisions",
    "section": "",
    "text": "flowchart TB\n    accTitle: Number of areas\n    A[\"How many areas should I have?\"] --&gt; B[\"Do I have lots of data\"]\n    B -- Yes --&gt; C[\"Is there limited movement\"]\n    C -- Yes --&gt; D[\"Is there evidence of significant spatial \n                    differences in growth or relative stock size?\"]\n    D -- Yes --&gt; E(\"Use more than one area\")\n    B -- No --&gt; F(\"Use one area\")\n    C -- No --&gt; F\n    D -- No --&gt; F\n    linkStyle 1,2,3,4,5,6 stroke-width:2px,color:black\n    style F fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"How many seasons should I have?\"] --&gt; B[\"Is it a short-lived, \n                                                fast growing species?\"]\n    B -- Yes --&gt; C[\"Am I using length data?\"]\n    C --Yes --&gt; D(\"Use multiple seasons\")\n    C -- No --&gt; E(\"Use one season\")\n    B -- No --&gt; F[\"Is fishing during a short season that \n                  precedes the survey or spawning?\"]\n    F -- Yes --&gt; D\n    F -- No --&gt; E\n    linkStyle 1,2,3,4,5,6 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"Should I use EWAA or parametric growth?\"] --&gt; B[\"Do I have lots of age data\"]\n    B -- Yes --&gt; C[\"Is there evidence of variability \n                  in weight-at-age\"]\n    C -- Yes --&gt; D(\"Use EWWA\")\n    B -- No --&gt; E(\"Use parametric growth\")\n    C -- No --&gt; E\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"How many fleets should I have?\"] --&gt; B[\"Are there significant differences in size\n                                              composition of the catch of different subsets\n                                              of the fishery?\"]\n    B --Yes --&gt; C(\"Multiple fleets\")\n    B -- No --&gt; D[\"Is there some management reason to \n                  model the catch separately?\"]\n    D -- Yes --&gt; C\n    D -- No --&gt; E(\"Group all catch as one fleet\")\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style C fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"Should I have one sex or two\"] --&gt; B[\"Am I modeling growth?\"]\n    B -- Yes --&gt; C[\"Is the species sexually dimorphic?\"]\n    C -- Yes --&gt; D(\"Use two sexes\")\n    A --&gt; E[\"Do I have sex-specific composition data?\"]\n    E -- Yes --&gt; D\n    B -- No --&gt; F(\"Combine females and males into one sex\")\n    C -- No --&gt; F\n    E -- No --&gt; F\n    linkStyle 1,2,3,4,5,6,7 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style F fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\nData age bins should cover the majority of the observed ages (i.e. not too large that a fraction is in the maximum age/plus group).\nThe first age is always 0, but recruitment can occur at age 1.\n\n\n\n\n\nflowchart TB\n    A[\"Can population age bins go \n      higher than data age bins?\"] --&gt; B[\"Is growth asymptotic within\n                                                observed ages?\"]\n    B -- No --&gt; C[\"Is unfished equilibrium estimated to \n                  have older fish than has been observed?\"]                                    \n    B -- Yes --&gt; D(\"Population age bins can go \n                   higher than data age bins\")\n    C -- Yes --&gt; D\n    C -- No --&gt; E(\"Population age bins can't go \n                  higher than data age bins\")\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\nIn models with growth, the plus group should be old enough so that fish nearly achieve \\(L_{inf}\\) by the time they are in the plus group."
  },
  {
    "objectID": "qmds/ss3_setup_decisions.html#model-dimensions-to-figure-out-before-adding-data",
    "href": "qmds/ss3_setup_decisions.html#model-dimensions-to-figure-out-before-adding-data",
    "title": "Important SS3 Set-up Decisions",
    "section": "",
    "text": "flowchart TB\n    accTitle: Number of areas\n    A[\"How many areas should I have?\"] --&gt; B[\"Do I have lots of data\"]\n    B -- Yes --&gt; C[\"Is there limited movement\"]\n    C -- Yes --&gt; D[\"Is there evidence of significant spatial \n                    differences in growth or relative stock size?\"]\n    D -- Yes --&gt; E(\"Use more than one area\")\n    B -- No --&gt; F(\"Use one area\")\n    C -- No --&gt; F\n    D -- No --&gt; F\n    linkStyle 1,2,3,4,5,6 stroke-width:2px,color:black\n    style F fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"How many seasons should I have?\"] --&gt; B[\"Is it a short-lived, \n                                                fast growing species?\"]\n    B -- Yes --&gt; C[\"Am I using length data?\"]\n    C --Yes --&gt; D(\"Use multiple seasons\")\n    C -- No --&gt; E(\"Use one season\")\n    B -- No --&gt; F[\"Is fishing during a short season that \n                  precedes the survey or spawning?\"]\n    F -- Yes --&gt; D\n    F -- No --&gt; E\n    linkStyle 1,2,3,4,5,6 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"Should I use EWAA or parametric growth?\"] --&gt; B[\"Do I have lots of age data\"]\n    B -- Yes --&gt; C[\"Is there evidence of variability \n                  in weight-at-age\"]\n    C -- Yes --&gt; D(\"Use EWWA\")\n    B -- No --&gt; E(\"Use parametric growth\")\n    C -- No --&gt; E\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"How many fleets should I have?\"] --&gt; B[\"Are there significant differences in size\n                                              composition of the catch of different subsets\n                                              of the fishery?\"]\n    B --Yes --&gt; C(\"Multiple fleets\")\n    B -- No --&gt; D[\"Is there some management reason to \n                  model the catch separately?\"]\n    D -- Yes --&gt; C\n    D -- No --&gt; E(\"Group all catch as one fleet\")\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style C fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    A[\"Should I have one sex or two\"] --&gt; B[\"Am I modeling growth?\"]\n    B -- Yes --&gt; C[\"Is the species sexually dimorphic?\"]\n    C -- Yes --&gt; D(\"Use two sexes\")\n    A --&gt; E[\"Do I have sex-specific composition data?\"]\n    E -- Yes --&gt; D\n    B -- No --&gt; F(\"Combine females and males into one sex\")\n    C -- No --&gt; F\n    E -- No --&gt; F\n    linkStyle 1,2,3,4,5,6,7 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style F fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\n\n\n\nData age bins should cover the majority of the observed ages (i.e. not too large that a fraction is in the maximum age/plus group).\nThe first age is always 0, but recruitment can occur at age 1.\n\n\n\n\n\nflowchart TB\n    A[\"Can population age bins go \n      higher than data age bins?\"] --&gt; B[\"Is growth asymptotic within\n                                                observed ages?\"]\n    B -- No --&gt; C[\"Is unfished equilibrium estimated to \n                  have older fish than has been observed?\"]                                    \n    B -- Yes --&gt; D(\"Population age bins can go \n                   higher than data age bins\")\n    C -- Yes --&gt; D\n    C -- No --&gt; E(\"Population age bins can't go \n                  higher than data age bins\")\n    linkStyle 1,2,3,4 stroke-width:2px,color:black\n    style D fill:#5EB6D9,stroke:#fff,color:#fff\n    style E fill:#5EB6D9,stroke:#fff,color:#fff\n\n\n\n\n\n\nIn models with growth, the plus group should be old enough so that fish nearly achieve \\(L_{inf}\\) by the time they are in the plus group."
  },
  {
    "objectID": "qmds/webinars.html",
    "href": "qmds/webinars.html",
    "title": "SS3 Webinars",
    "section": "",
    "text": "We have every other month webinars on SS3 features and topics. The first part of these webinars are more of a presentation on the feature or topic and the second part is a Q&A session. Subscribe to the SS3 Webinar calendar.\nTo suggest future webinar topics, please post to the SS3 User Forum Google Group."
  },
  {
    "objectID": "qmds/webinars.html#july-22-2025---impact-of-time-varying-biology-on-reference-points-in-ss3",
    "href": "qmds/webinars.html#july-22-2025---impact-of-time-varying-biology-on-reference-points-in-ss3",
    "title": "SS3 Webinars",
    "section": "July 22, 2025 - Impact of time-varying biology on reference points in SS3",
    "text": "July 22, 2025 - Impact of time-varying biology on reference points in SS3"
  },
  {
    "objectID": "qmds/webinars.html#january-16-2025---richards-curve-with-arni-magnusson",
    "href": "qmds/webinars.html#january-16-2025---richards-curve-with-arni-magnusson",
    "title": "SS3 Webinars",
    "section": "January 16, 2025 - Richards curve with Arni Magnusson",
    "text": "January 16, 2025 - Richards curve with Arni Magnusson\n\n\n\n\n\n\n\n\n\nPlease also see the Richards Growth Curve vignette."
  },
  {
    "objectID": "qmds/webinars.html#november-19-2024---interacting-with-ss3-repos-on-github",
    "href": "qmds/webinars.html#november-19-2024---interacting-with-ss3-repos-on-github",
    "title": "SS3 Webinars",
    "section": "November 19, 2024 - Interacting with SS3 repos on GitHub",
    "text": "November 19, 2024 - Interacting with SS3 repos on GitHub"
  },
  {
    "objectID": "qmds/webinars.html#october-15-2024---recruitment-with-time-varying-biology",
    "href": "qmds/webinars.html#october-15-2024---recruitment-with-time-varying-biology",
    "title": "SS3 Webinars",
    "section": "October 15, 2024 - Recruitment with time-varying biology",
    "text": "October 15, 2024 - Recruitment with time-varying biology\nMaterials will appear when approved for public consumption."
  },
  {
    "objectID": "qmds/webinars.html#may-16-2024---fishing-mortality-f",
    "href": "qmds/webinars.html#may-16-2024---fishing-mortality-f",
    "title": "SS3 Webinars",
    "section": "May 16, 2024 - Fishing Mortality (\\(F\\))",
    "text": "May 16, 2024 - Fishing Mortality (\\(F\\))\n\n\n Download F Mortality Example input files"
  },
  {
    "objectID": "qmds/ss3_model_tips.html",
    "href": "qmds/ss3_model_tips.html",
    "title": "Developing your first Stock Synthesis model",
    "section": "",
    "text": "The developing your first SS3 model guide teaches users how to develop a basic Stock Synthesis model. We assume that these users have had previous population dynamics modeling experience and already understand how to run an existing SS3 model.\nIf you are a new SS3 user who is not yet comfortable running an SS3 model, we suggest trying to run an example working model using advice in the Getting Started Guide before attempting to develop and run your own model as outlined in this guide.\nBy the end of using this guide, you should be able to:\n\nDevelop your own SS3 model development workflow based on the tools and methods suggested\nFind information on the required inputs for different model specifications\nUnderstand how to use phases within an SS3 model\nDebug basic issues with input in Stock Synthesis models and identify when there are more advanced model problems"
  },
  {
    "objectID": "qmds/ss3_model_tips.html#first-runs-without-estimation",
    "href": "qmds/ss3_model_tips.html#first-runs-without-estimation",
    "title": "Developing your first Stock Synthesis model",
    "section": "First runs without estimation",
    "text": "First runs without estimation\nFirst, check that SS3 reads the input files as intended. Use -stopph 0 -nohess command line options to run the model without estimation. Then examine warning.sso, echoinput.sso, and the .ss_new files produced to see how SS3 interpreted your input files and if it was as you intended.\nAfter you have verified that SS3 is reading your input correctly, you can also consider adjustment to selectivity, growth, and recruitment parameters."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#runs-estimating-some-parameters",
    "href": "qmds/ss3_model_tips.html#runs-estimating-some-parameters",
    "title": "Developing your first Stock Synthesis model",
    "section": "Runs estimating some parameters",
    "text": "Runs estimating some parameters\nTry changing max phase to be greater than 0 (perhaps 2 or 3) to estimate some but not all parameters. Do this by using -stopph x -nohess, where x should the maximum phase desired (e.g., 2 or 3). -nohess is still used to reduce run time. During this stage of model runs, you should try to adjust the model to resolve all major patterns in the residuals. This may include considering and making changes to the model structure."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#runs-estimating-all-parameters",
    "href": "qmds/ss3_model_tips.html#runs-estimating-all-parameters",
    "title": "Developing your first Stock Synthesis model",
    "section": "Runs estimating all parameters",
    "text": "Runs estimating all parameters\nOnce all major patterns in the residuals have been resolved, try estimating all parameters in the model. Change max phase to include all of your model phases (i.e., equal to or higher than the highest phase specified in your model). You’ll want to do multiple runs for different model refinement purposes at this time:\n\nDo one or more run(s) with the hessian estimated to get variance of the recruitment deviations and then use this vector of variances to adjust the bias adjustment ramp (see the SS3 user manual for additional details).\nDo runs with or without estimating the Hessian to tune the data weightings.\nRun the model multiple times and jitter the starting values (option to jitter is selected in starter.ss). This runs the model with new starting parameter values to determine if a better model fit is possible using different starting values.\n\nAfter these runs, your model should be fine-tuned and ready for final runs."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#if-the-residuals-have-substantial-patterns",
    "href": "qmds/ss3_model_tips.html#if-the-residuals-have-substantial-patterns",
    "title": "Developing your first Stock Synthesis model",
    "section": "If the residuals have substantial patterns",
    "text": "If the residuals have substantial patterns\nIt is often difficult to pinpoint the cause of residuals that have substantial patterns, but two potential reasons this could happen are unrealistic starting values or poor model specification. If you have residuals with substantial pattern, you can try changing the starting values. If a parameter is not moving from the starting value, there may not be enough information to determine its value and it may be necessary to fix the value in the model. If the parameter does move with different starting values, it is possible that the starting value used before was not reasonable and thus changing the starting value to a reasonable value fixes the issue."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#if-ss3-runs-but-there-is-a-large-gradient-at-the-end",
    "href": "qmds/ss3_model_tips.html#if-ss3-runs-but-there-is-a-large-gradient-at-the-end",
    "title": "Developing your first Stock Synthesis model",
    "section": "If SS3 runs, but there is a large gradient at the end",
    "text": "If SS3 runs, but there is a large gradient at the end\nLarge gradients are usually reported in warnings.sso file, so this problem should be clear when examining the file after a model run. If this is the case, try the following\n\nExamine Report.sso for parameters that are on or near bounds, as these may be the parameters that are causing issues. It depends on the value, but you can consider changing your bounds or the parameters, depending on what seems most plausible given your model.\nExamine residuals to identify if there is overall poor lack-of-fit. This may indicate that the ADMB algorithm failed to find the global minimum. Try alternative starting values to attempt to solve this problem. However, it is also possible that there is large disagreement between your model structure and your model file, in which case you may want to reconsider the model specification - perhaps there is an alternative model structure that makes more sense for the population."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#if-the-hessian-does-not-invert",
    "href": "qmds/ss3_model_tips.html#if-the-hessian-does-not-invert",
    "title": "Developing your first Stock Synthesis model",
    "section": "If the Hessian does not invert",
    "text": "If the Hessian does not invert\nThe Hessian information is reported in the Report.sso file, so go to this section to confirm if this is an issue. This is a difficult issue to solve, but considering alternative models may be necessary if the Hessian will not invert."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#does-my-model-model-make-sense",
    "href": "qmds/ss3_model_tips.html#does-my-model-model-make-sense",
    "title": "Developing your first Stock Synthesis model",
    "section": "Does my model model make sense?",
    "text": "Does my model model make sense?\n\nDoes the biology make sense? Selectivity?\nIs the model fitting the indices? Length and age data?\nWhat is the pattern in recruitment?\nDoes the prior type match what I thought I was specifying?"
  },
  {
    "objectID": "qmds/ss3_model_tips.html#does-my-model-fit-well",
    "href": "qmds/ss3_model_tips.html#does-my-model-fit-well",
    "title": "Developing your first Stock Synthesis model",
    "section": "Does my model fit well?",
    "text": "Does my model fit well?\n\nThe r4ss::SS_output() function prints some very useful diagnostics to the R console window, including a list of the estimated parameters, the estimated value, whether the parameter is hitting a bound, the gradient, and the prior type. Use this (or other SS3 output files) to answer:\n\nDid the parameter move from the initial value?\nIs the parameter hitting a bound?\nIs the parameter gradient low?\n\nBelow the parameter estimates that r4ss::SS_output() prints to the console, there is a specific section that highlights the parameters with the highest model gradients. Examining this list might indicate which (if any) parameters may need to be fixed due to lack of information in the data. For example, there may be selectivity parameters included in the list where small changes in the parameter value do not change the model results (or the form of the selectivity)."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#does-my-data-weighting-make-sense",
    "href": "qmds/ss3_model_tips.html#does-my-data-weighting-make-sense",
    "title": "Developing your first Stock Synthesis model",
    "section": "Does my data weighting make sense?",
    "text": "Does my data weighting make sense?\nThe r4ss::SS_output() function prints information on tuning to the R console. This includes tuning information for length and age data that can be used for data weighting when using McAllister-Ianelli weighting (i.e., weighting by the harmonic mean). The r4ss::SS_plots() function creates mean length and ages figures with captions showing the recommended Francis weights for each data source. Even if you are using an alternative data weighting approach (i.e., Francis, Dirichlet, or other), it is always good practice to explore an alternative approach and see how data weighting changes the model."
  },
  {
    "objectID": "qmds/ss3_model_tips.html#did-i-fix-variation-in-recruitment-correctly",
    "href": "qmds/ss3_model_tips.html#did-i-fix-variation-in-recruitment-correctly",
    "title": "Developing your first Stock Synthesis model",
    "section": "Did I fix variation in recruitment correctly?",
    "text": "Did I fix variation in recruitment correctly?\nCheck the the \\(\\sigma R\\) (sigmaR) (i.e., recruitment deviations standard deviation) information. The \\(\\sigma R\\) parameter is typically fixed within the model, so if it is not fixed within your model, you should consider whether or not this makes sense for the population and given the quality and quantity of data.\nFor a fixed value of \\(\\sigma R\\), a section of the output will provide diagnostics to determine if the fixed \\(\\sigma R\\) value is capturing the estimated variations in recruitment. The r4ss::SS_output() function will print a recommended value based on the variation in the estimated recruitment deviations that you may want to consider using."
  },
  {
    "objectID": "qmds/model_tutorial.html",
    "href": "qmds/model_tutorial.html",
    "title": "Model building tutorial",
    "section": "",
    "text": "This is a tutorial illustrating how different data and parameters familiar to stock assessment scientists can be added to Stock Synthesis input files. We assume that these users have had previous population dynamics modeling experience and already understand how to run an existing SS3 model.\nIf you are a new SS3 user who is not yet comfortable running an SS3 model, we suggest trying to run a working example model using advice in the Getting Started document before attempting to develop and run your own model as outlined in this guide. You can also get more general model building advice in the Developing your first Stock Synthesis model guide.\nThroughout this example, we use an even simpler version of the Stock Synthesis example model “Simple”. To get the most out of this tutorial, it is best to download the model files to look at during the tutorial. It may also be useful to run the model and plot the results using the R package {r4ss}."
  },
  {
    "objectID": "qmds/model_tutorial.html#general",
    "href": "qmds/model_tutorial.html#general",
    "title": "Model building tutorial",
    "section": "General",
    "text": "General\nThe Simple model is a 2-sex age-structured assessment model for a single population in 1 area starting in 1971 and ending in 2001. The maximum age in the model is 40 years. It includes 1 fishery and 2 surveys. Survey 1 is a fisheries independent survey, while the second survey is for age-0 fish."
  },
  {
    "objectID": "qmds/model_tutorial.html#fishery-and-survey-data",
    "href": "qmds/model_tutorial.html#fishery-and-survey-data",
    "title": "Model building tutorial",
    "section": "Fishery and survey data",
    "text": "Fishery and survey data\nThe fishery does not discard and thus retains all fish that it catches. Logistic length-based selectivity was assumed for the fishery and for survey 1. Full selectivity was assumed for age-0 fish only (i.e., the survey does not catch any fish older than age 0) for the second survey. Catchability (Q) is estimated for both surveys, and to adjust for data quality, additional standard deviation is specified.\nCatch comes from the fishery. Indices of abundance come from both survey 1 and survey 2. Length composition and age composition data comes from the fishery and survey 1.\nNo aging error bias is assumed and aging is considered to be very precise."
  },
  {
    "objectID": "qmds/model_tutorial.html#more-specific-parameter-assumptions",
    "href": "qmds/model_tutorial.html#more-specific-parameter-assumptions",
    "title": "Model building tutorial",
    "section": "More specific parameter assumptions",
    "text": "More specific parameter assumptions\n\nNatural mortality, growth, maturity, and sex ratio\nAll parameters are assumed to be the same over time. Natural mortality is specified at 0.1. A von Bertalanfy growth curve is used with \\(K\\) estimated. Maturity is assumed to be length logistic with some specified parameter values. The sex ratio is assumed 50-50 female and male.\n\n\nSpawner-Recruitment\nA Beverton-Holt SR relationship is assumed, with values for steepness (h) and \\(R_{0}\\) estimated.\n\n\nRecruitment\nRecruitment deviations are assumed, and include a bias ramp to account for early and late observations having less information than recruitments during 1971-2001.\n\n\nFishing mortality\nFishing mortality is found using a hybrid approach, meaning that F’s are estimated parameters, but are constrained using Pope’s approximation.\n\n\nData weighting\nThis model has not yet undergone data weighting, which would of course be necessary in a true model. This will be discussed later on in this write-up.\n\n\nForecasting\nThis needs to be considered more carefully; try to use the most standard options for this"
  },
  {
    "objectID": "qmds/model_tutorial.html#starter-and-forecast",
    "href": "qmds/model_tutorial.html#starter-and-forecast",
    "title": "Model building tutorial",
    "section": "Starter and Forecast",
    "text": "Starter and Forecast\nGeneric starter and forecast files were used. There were no need to modify them specifically for this example. However, it should be checked that the correct data and control file names are listed at the top of the starter file:\n\n#_user_info_available_at:https://vlab.ncep.noaa.gov/group/stock-synthesis\n#C starter comment\ndata.ss\ncontrol.ss\n0 # 0=use init values in control file; 1=use ss3.par\n0 # run display detail (0,1,2)\n\nIn the case of this example, data.ss is the name of the data file, while control.ss is the name of the control file."
  },
  {
    "objectID": "qmds/model_tutorial.html#data-file",
    "href": "qmds/model_tutorial.html#data-file",
    "title": "Model building tutorial",
    "section": "Data file",
    "text": "Data file\nThis is where the data inputs are specified. At the top, general information about the model is specified: the model years, number of seasons, number of sexes, maximum age, number of areas, number of fleets:\n\n#Stock Synthesis (SS3) is a work of the U.S. Government and is not subject to copyright protection in the United States.\n#Foreign copyrights may apply. See copyright.txt for more information.\n1971 #_StartYr\n2001 #_EndYr\n1 #_Nseas\n12 #_months/season\n2 #_Nsubseasons (even number, minimum is 2)\n1 #_spawn_month\n2 #_Nsexes: 1, 2, -1  (use -1 for 1 sex setup with SSB multiplied by female_frac parameter)\n40 #_Nages=accumulator age, first age is always age 0\n1 #_Nareas\n3 #_Nfleets (including surveys)\n\nNext, the fleet types are specified. Since we have one fishery and 2 surveys (3 fleets in all), there will be three lines.\n\n#_fleet_type: 1=catch fleet; 2=bycatch only fleet; 3=survey; 4=ignore \n#_sample_timing: -1 for fishing fleet to use season-long catch-at-age for observations, or 1 to use observation month;  (always 1 for surveys)\n#_fleet_area:  area the fleet/survey operates in \n#_units of catch:  1=bio; 2=num (ignored for surveys; their units read later)\n#_catch_mult: 0=no; 1=yes\n#_rows are fleets\n#_fleet_type fishery_timing area catch_units need_catch_mult fleetname\n 1 -1 1 1 0 FISHERY  # 1\n 3 1 1 2 0 SURVEY1  # 2\n 3 1 1 2 0 SURVEY2  # 3\n\nMost notable in these fleet types is that the fishery has type 1 (because it is a catch fleet) and the surveys have type 3. Units for each fleet (what is called “catch units” in the header) are also specified in this part of the data file, although for the surveys they are ignored. For the fishery, it has “catch-units” = 1, which means it is in units of biomass and not numbers.The names for the fleets are specified last on each line (before the comment). For example, in this case, the fishery has been named FISHERY, while the first survey has been named SURVEY1.\nNext, the catch is specified:\n\n#_Catch data: yr, seas, fleet, catch, catch_se\n#_catch_se:  standard error of log(catch)\n#_NOTE:  catch data is ignored for survey fleets\n-999 1 1 0 0.01\n1971 1 1 0 0.01\n1972 1 1 200 0.01\n1973 1 1 1000 0.01\n...\n...\n...\n2000 1 1 3000 0.01\n2001 1 1 3000 0.01\n-9999 0 0 0 0\n\nThe first line of the above code chunk shows the column headers for the catch data. Note that all catch comes from the fishery. The line -999 1 1 0 0.01 specifies equilibirum catch for years before the model starts - in this case, there is no equilibrium catch because the catch column is 0. To terminate this catch data section the line -9999 0 0 0 0 is needed. This tells SS3 that it can stop reading catch data.\nNext comes specification for indices of abundance. First is the setup for all of the fleets:\n\n#_CPUE_and_surveyabundance_observations\n#_Units:  0=numbers; 1=biomass; 2=F; &gt;=30 for special types\n#_Errtype:  -1=normal; 0=lognormal; &gt;0=T\n#_SD_Report: 0=no sdreport; 1=enable sdreport\n#_Fleet Units Errtype SD_Report\n1 1 0 0 # FISHERY\n2 1 0 1 # SURVEY1\n3 0 0 0 # SURVEY2\n\nThe column headers for this section are directly above the numbers. Note that all fleets are defined in this section (i.e., each fleet needs a line), including the fishery and are listed in the same order as when the fleet types were specified. Most importantly in this section, the units and error type that will be used when reading the the indices of abundance are specified. In this case, the fishery and survey 1 have units of biomass, whereas survey 2 is in numbers. Log-normal error is assumed for all 3 of the fleets.\nDirectly after its header, the indices of abundance data is included:\n\n#_yr month fleet obs stderr\n1977 7 2 339689 0.3 #_ SURVEY1\n1980 7 2 193353 0.3 #_ SURVEY1\n1983 7 2 151984 0.3 #_ SURVEY1\n...\n...\n...\n2000 7 3 5.97125 0.7 #_ SURVEY2\n2001 7 3 1.69379 0.7 #_ SURVEY2\n-9999 1 1 1 1 # terminator for survey observations \n\nLike the catch data, a terminator line is needed to tell SS3 when to stop reading the indices.\nNext, discards and mean body size data could be specified, but they are 0 in this example:\n\n0 #_N_fleets_with_discard\n...\n...\n...\n0 #_use meanbodysize_data (0/1)\n\nThe next section sets up the population length bins. This needs to be specified whether or not length composition data is used (although you could generate the population length bins from the length composition data bins).\n\n# set up population length bin structure (note - irrelevant if not using size data and using empirical wtatage\n2 # length bin method: 1=use databins; 2=generate from binwidth,min,max below; 3=read vector\n2 # binwidth for population size comp \n10 # minimum size in the population (lower edge of first bin and size at age 0.00) \n94 # maximum size in the population (lower edge of last bin) \n1 # use length composition data (0/1)\n\nFollowing the population bins is the setup for length composition (expecting 1 line per fleet):\n\n#_mintailcomp addtocomp combM+F CompressBins CompError ParmSelect minsamplesize\n0 1e-007 0 0 0 0 1 #_fleet:1_FISHERY\n0 1e-007 0 0 0 0 1 #_fleet:2_SURVEY1\n0 1e-007 0 0 0 0 1 #_fleet:3_SURVEY2\n\nThe length composition bin setup:\n\n25 #_N_LengthBins; then enter lower edge of each length bin\n 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 68 72 76 80 90\n\nAnd then the length composition data:\n\n#_yr month fleet sex part Nsamp datavector(female-male)\n 1971 7 1 3 0 125 0 0 0 0 0 0 0 0 0 4 1 1 2 4 1 5 6 2 3 11 8 4 5 0 0 0 0 0 0 0 0 0 0 1 0 1 3 0 3 4 2 4 5 9 17 8 3 8 0 0\n 1972 7 1 3 0 125 0 0 0 0 0 0 0 0 0 3 0 1 2 1 1 6 2 7 4 10 10 4 5 3 0 0 0 0 0 0 0 0 0 1 3 2 4 1 3 1 4 4 7 3 8 11 4 10 0 0\n 1973 7 1 3 0 125 0 0 0 0 0 0 0 0 0 0 0 0 7 3 4 5 6 3 10 12 6 10 9 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 1 3 0 7 2 6 7 8 5 5 3 0\n 1974 7 1 3 0 125 0 0 0 0 0 0 0 0 0 2 2 0 1 1 1 4 5 3 8 8 10 4 7 0 0 0 0 0 0 0 0 0 1 2 0 4 0 0 1 5 6 6 4 6 15 11 5 0 3 0\n ...\n ...\n ...\n 1998 7 2 3 0 125 0 0 0 3 1 1 2 3 4 6 4 6 5 3 1 2 1 1 1 5 2 2 0 0 0 0 0 0 0 10 5 4 2 3 7 2 1 4 4 5 3 2 3 1 8 6 2 0 0 0\n 2001 7 2 3 0 125 0 0 0 0 0 2 3 5 7 5 9 2 9 5 4 4 1 1 2 2 8 0 0 0 0 0 0 0 0 2 1 4 6 5 6 4 3 4 4 5 1 3 2 1 3 2 0 0 0 0\n-9999 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n\nIn this 2 sex model, length composition data is put in for females, with 1 number per length composition bin set up previously, followed by data for males with also 1 number per length composition bin.\nAge composition data follows. First, the age bins and ageerror definitions are established:\n\n17 #_N_age_bins\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 20 25\n1 #_N_ageerror_definitions\n 0.5 1.5 2.5 3.5 4.5 5.5 6.5 7.5 8.5 9.5 10.5 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5 20.5 21.5 22.5 23.5 24.5 25.5 26.5 27.5 28.5 29.5 30.5 31.5 32.5 33.5 34.5 35.5 36.5 37.5 38.5 39.5 40.5\n 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.001\n\nFor the age bins, SS3 reads in the number (17 in this case) and then expects that number of inputs for the age bins (the 17 values below it). Next, SS3 reads the age error definitions. In this case, there is only 1 definition, so SS3 expects 2 vectors, each which contain the max number of ages + 1 values (41 values per vector in this case). The first line defines the bias for the aging error, while the second vector defines the standard deviation of the aging error. This example has no aging bias and very high aging precision (low standard deviation), so this is close to assuming no aging error.\nNext comes the age composition setup lines:\n\n#_mintailcomp addtocomp combM+F CompressBins CompError ParmSelect minsamplesize\n0 1e-007 1 0 0 0 1 #_fleet:1_FISHERY\n0 1e-007 1 0 0 0 1 #_fleet:2_SURVEY1\n0 1e-007 1 0 0 0 1 #_fleet:3_SURVEY2\n1 #_Lbin_method_for_Age_Data: 1=poplenbins; 2=datalenbins; 3=lengths\n\nwhich includes the length bin method for ages. Finally, the age composition data is input:\n\n#_yr month fleet sex part ageerr Lbin_lo Lbin_hi Nsamp datavector(female-male)\n 1971 7 1 3 0 1 -1 -1 75 0 0 0 0 3 1 1 4 2 1 0 1 2 2 13 2 3 0 0 4 2 1 1 2 1 2 2 1 2 1 2 6 5 8\n 1972 7 1 3 0 1 -1 -1 75 2 1 1 1 0 3 1 2 2 5 3 1 2 2 9 8 3 0 0 1 2 3 1 3 0 5 1 3 0 2 1 2 3 2\n 1973 7 1 3 0 1 -1 -1 75 0 0 1 0 1 1 2 3 3 1 1 5 2 2 7 4 3 0 0 0 4 1 3 5 1 2 3 1 3 2 0 5 3 6\n ...\n ...\n ...\n 1998 7 2 3 0 1 -1 -1 75 9 4 4 3 1 1 1 1 3 3 1 2 1 7 0 0 0 0 6 5 3 5 1 3 3 2 3 2 0 1 0 0 0 0\n 2001 7 2 3 0 1 -1 -1 75 4 0 4 11 5 3 4 2 2 0 0 0 0 0 2 0 0 0 2 4 7 11 5 2 0 2 2 2 0 0 0 1 0 0\n-9999 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\nOne important note is that using Lbin_lo and Lbin_hi = -1 selects the entire length bin as being used for the ages. Similar to the length composition data, SS3 expect 1 value for females in each data bin, followed by values for males in each data bin (in this case, there are 34 values in the data vector)\nSS3 has some additional options that we have not used in this setup and thus set to 0:\n\n0 #_Use_MeanSize-at-Age_obs (0/1)\n#\n0 #_N_environ_variables\n#Yr Variable Value\n#\n0 # N sizefreq methods to read \n#\n0 # do tags (0/1)\n#\n0 #    morphcomp data(0/1) \n#  Nobs, Nmorphs, mincomp\n#  yr, seas, type, partition, Nsamp, datavector_by_Nmorphs\n#\n0  #  Do dataread for selectivity priors(0/1)\n\nAnd finally, the data file must end in 999 to tell SS3 to stop reading.\n\n999"
  },
  {
    "objectID": "qmds/model_tutorial.html#control-file",
    "href": "qmds/model_tutorial.html#control-file",
    "title": "Model building tutorial",
    "section": "Control file",
    "text": "Control file\nThe control file contains the setup for model parameter values (both fixed values and estimated values). The first option to be aware of is a line to read the empirical weight at age file:\n\n0  # 0 means do not read wtatage.ss; 1 means read and use wtatage.ss and also read and use growth parameters\n\nIn this case, it is not being used, so is set to 0. If empirical weight-at-age were used, SS3 would ignore all inputs relating to growth, maturity, and fecundity that are specified later in the control file (although it does still expect inputs).\nNext are options for number of growth patterns and platoons. These are set to 1 because we assume the whole population is the same growth pattern, and there are not platoons within the growth patterns.\n\n1  #_N_Growth_Patterns (Growth Patterns, Morphs, Bio Patterns, GP are terms used interchangeably in SS)\n1 #_N_platoons_Within_GrowthPattern \n\nThe recruitment distribution is then specified. We are assuming for this population that there is only 1 growth pattern, 1 time of settlement, and 1 area, so we can use option 4. This is the simplest, because it requires no full parameter lines further on in the control file.\n\n#\n4 # recr_dist_method for parameters:  2=main effects for GP, Area, Settle timing; 3=each Settle entity; 4=none (only when N_GP*Nsettle*pop==1)\n1 # not yet implemented; Future usage: Spawner-Recruitment: 1=global; 2=by area\n1 #  number of recruitment settlement assignments \n0 # unused option\n#GPattern month  area  age (for each settlement assignment)\n 1 1 1 0\n#\n\nNote that we also used 1 settlement assignment, and specified that the fish settled in January at age 0. This could be modified if the fish settled at a different age or time.\nWe are not using time blocks, but there are some specified in this model.\n\n1 #_Nblock_Patterns\n1 #_blocks_per_pattern \n# begin and end years of blocks\n1970 1970\n\nNote that any blocks could be specified and not used (blocks are set up in this section, but are not used until it is specified within a parameter line), so there could be any number of blocks specified in this section.\nLikewise, timevarying parameters are not used, so it is unimportant what is specified in the time varying control parameters:\n\n# controls for all timevary parameters \n1 #_env/block/dev_adjust_method for all time-vary parms (1=warn relative to base parm bounds; 3=no bound check)\n#\n# AUTOGEN\n0 0 0 0 0 # autogen: 1st element for biology, 2nd for SR, 3rd for Q, 4th reserved, 5th for selex\n# where: 0 = autogen all time-varying parms; 1 = read each time-varying parm line; 2 = read then autogen if parm min==-12345\n\nThe setup lines for natural mortality, growth, and maturity come next.\nOption 0 is used for natural mortality because only 1 value is being assumed. Growth model 1 is used to specify a von Bertalanffy growth model, followed by lines specifying details about growth:\n\n0 #_natM_type:_0=1Parm; 1=N_breakpoints;_2=Lorenzen;_3=agespecific;_4=agespec_withseasinterpolate\n  #_no additional input for selected M option; read 1P per morph\n#\n1 # GrowthModel: 1=vonBert with L1&L2; 2=Richards with L1&L2; 3=age_specific_K_incr; 4=age_specific_K_decr; 5=age_specific_K_each; 6=NA; 7=NA; 8=growth cessation\n0 #_Age(post-settlement)_for_L1;linear growth below this\n25 #_Growth_Age_for_L2 (999 to use as Linf)\n-999 #_exponential decay for growth above maxage (value should approx initial Z; -999 replicates 3.24; -998 to not allow growth above maxage)\n0  #_placeholder for future growth feature\n#\n0 #_SD_add_to_LAA (set to 0.1 for SS2 V1.x compatibility)\n0 #_CV_Growth_Pattern:  0 CV=f(LAA); 1 CV=F(A); 2 SD=F(LAA); 3 SD=F(A); 4 logSD=F(A)\n#\n\nThen, the setup lines for maturity, fecundity, and other specialized options:\n\n1 #_maturity_option:  1=length logistic; 2=age logistic; 3=read age-maturity matrix by growth_pattern; 4=read age-fecundity; 5=disabled; 6=read length-maturity\n1 #_First_Mature_Age\n1 #_fecundity option:(1)eggs=Wt*(a+b*Wt);(2)eggs=a*L^b;(3)eggs=a*Wt^b; (4)eggs=a+b*L; (5)eggs=a+b*W\n0 #_hermaphroditism option:  0=none; 1=female-to-male age-specific fxn; -1=male-to-female age-specific fxn\n1 #_parameter_offset_approach (1=none, 2= M, G, CV_G as offset from female-GP1, 3=like SS2 V1.x)\n\nThe parameter lines resulting from the natural mortality, growth, and maturity (this section is sometimes called MG parms) are specified next. The number of parameter lines depends on the options selected in the setup lines. The parameters must also be specified in a particular order, with female parameters coming before male parameters in a 2-sex model:\n\n#_ LO HI INIT PRIOR PR_SD PR_type PHASE env_var&link dev_link dev_minyr dev_maxyr dev_PH Block Block_Fxn\n# Sex: 1  BioPattern: 1  NatMort\n 0.05 0.15 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # NatM_p_1_Fem_GP_1\n# Sex: 1  BioPattern: 1  Growth\n -10 45 21.6535 36 10 6 2 0 0 0 0 0 0 0 # L_at_Amin_Fem_GP_1\n 40 90 71.6493 70 10 6 4 0 0 0 0 0 0 0 # L_at_Amax_Fem_GP_1\n 0.05 0.25 0.147297 0.15 0.8 6 4 0 0 0 0 0 0 0 # VonBert_K_Fem_GP_1\n 0.05 0.25 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # CV_young_Fem_GP_1\n 0.05 0.25 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # CV_old_Fem_GP_1\n# Sex: 1  BioPattern: 1  WtLen\n -3 3 2.44e-006 2.44e-006 0.8 0 -3 0 0 0 0 0 0 0 # Wtlen_1_Fem_GP_1\n -3 4 3.34694 3.34694 0.8 0 -3 0 0 0 0 0 0 0 # Wtlen_2_Fem_GP_1\n# Sex: 1  BioPattern: 1  Maturity&Fecundity\n 50 60 55 55 0.8 0 -3 0 0 0 0 0 0 0 # Mat50%_Fem_GP_1\n -3 3 -0.25 -0.25 0.8 0 -3 0 0 0 0 0 0 0 # Mat_slope_Fem_GP_1\n -3 3 1 1 0.8 0 -3 0 0 0 0 0 0 0 # Eggs/kg_inter_Fem_GP_1\n -3 3 0 0 0.8 0 -3 0 0 0 0 0 0 0 # Eggs/kg_slope_wt_Fem_GP_1\n# Sex: 2  BioPattern: 1  NatMort\n 0.05 0.15 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # NatM_p_1_Mal_GP_1\n# Sex: 2  BioPattern: 1  Growth\n 1 45 0 36 10 0 -3 0 0 0 0 0 0 0 # L_at_Amin_Mal_GP_1\n 40 90 69.5362 70 10 6 4 0 0 0 0 0 0 0 # L_at_Amax_Mal_GP_1\n 0.05 0.25 0.163533 0.15 0.8 6 4 0 0 0 0 0 0 0 # VonBert_K_Mal_GP_1\n 0.05 0.25 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # CV_young_Mal_GP_1\n 0.05 0.25 0.1 0.1 0.8 0 -3 0 0 0 0 0 0 0 # CV_old_Mal_GP_1\n# Sex: 2  BioPattern: 1  WtLen\n -3 3 2.44e-006 2.44e-006 0.8 0 -3 0 0 0 0 0 0 0 # Wtlen_1_Mal_GP_1\n -3 4 3.34694 3.34694 0.8 0 -3 0 0 0 0 0 0 0 # Wtlen_2_Mal_GP_1\n# Hermaphroditism\n#  Recruitment Distribution  \n#  Cohort growth dev base\n 0.1 10 1 1 1 0 -1 0 0 0 0 0 0 0 # CohortGrowDev\n#  Movement\n#  Age Error from parameters\n#  catch multiplier\n#  fraction female, by GP\n 1e-006 0.999999 0.5 0.5 0.5 0 -99 0 0 0 0 0 0 0 # FracFemale_GP_1\n\nNote that the first line in the block of SS3 input above shows the column headers. All sections with long parameter lines within the control file have these same headings. There are a lot of specifications in these long parameter lines, but a few of particular note are:\n\nAnything with negative phase (7th value in a long parameter line) is not estimated and is set at the initial value (3rd value in the line), while positive phases are estimated.\nNatural mortality for both males and females is specified at 0.1.\nThe 3 parameters of the von Bertalanffy growth curve are estimated.\n\nNext are some unused options, because there is no seasonality in the biology parameters:\n\n#_no timevary MG parameters\n#\n#_seasonal_effects_on_biology_parms\n 0 0 0 0 0 0 0 0 0 0 #_femwtlen1,femwtlen2,mat1,mat2,fec1,fec2,Malewtlen1,malewtlen2,L1,K\n#_ LO HI INIT PRIOR PR_SD PR_type PHASE\n#_Cond -2 2 0 0 -1 99 -2 #_placeholder when no seasonal MG parameters\n\nNext, the Spawner recruitment setup and Spawner recruit long parameter lines are specified (sometimes referred to as SR parms). To set up the lines, a Beverton-Holt SR curve is specified:\n\n3 #_Spawner-Recruitment; Options: 2=Ricker; 3=std_B-H; 4=SCAA; 5=Hockey; 6=B-H_flattop; 7=survival_3Parm; 8=Shepherd_3Parm; 9=RickerPower_3parm\n0  # 0/1 to use steepness in initial equ recruitment calculation\n0  #  future feature:  0/1 to make realized sigmaR a function of SR curvature\n\nwhich effects the number of SR parameter lines that follow:\n\n#_          LO            HI          INIT         PRIOR         PR_SD       PR_type      PHASE    env-var    use_dev   dev_mnyr   dev_mxyr     dev_PH      Block    Blk_Fxn #  parm_name\n             3            31       8.81505          10.3            10             0          1          0          0          0          0          0          0          0 # SR_LN(R0)\n           0.2             1      0.614248           0.7          0.05             1          4          0          0          0          0          0          0          0 # SR_BH_steep\n             0             2           0.6           0.8           0.8             0         -4          0          0          0          0          0          0          0 # SR_sigmaR\n            -5             5             0             0             1             0         -4          0          0          0          0          0          0          0 # SR_regime\n             0             0             0             0             0             0        -99          0          0          0          0          0          0          0 # SR_autocorr\n\nThe recruitment deviation options are specified after the SR parms. First are the standard recruitment deviations options:\n\n1 #do_recdev:  0=none; 1=devvector (R=F(SSB)+dev); 2=deviations (R=F(SSB)+dev); 3=deviations (R=R0*dev; dev2=R-f(SSB)); 4=like 3 with sum(dev2) adding penalty\n1971 # first year of main recr_devs; early devs can preceed this era\n2001 # last year of main recr_devs; forecast devs start in following year\n2 #_recdev phase \n\nThese define the main recruitment deviations, which in this case last from the first year of the model to the last year. Advanced options are also read:\n\n1 # (0/1) to read 13 advanced options\n 0 #_recdev_early_start (0=none; neg value makes relative to recdev_start)\n -4 #_recdev_early_phase\n 0 #_forecast_recruitment phase (incl. late recr) (0 value resets to maxphase+1)\n 1 #_lambda for Fcast_recr_like occurring before endyr+1\n 1900 #_last_yr_nobias_adj_in_MPD; begin of ramp\n 1900 #_first_yr_fullbias_adj_in_MPD; begin of plateau\n 2001 #_last_yr_fullbias_adj_in_MPD\n 2002 #_end_yr_for_ramp_in_MPD (can be in forecast to shape ramp, but SS3 sets bias_adj to 0.0 for fcast yrs)\n 1 #_max_bias_adj_in_MPD (-1 to override ramp and set biasadj=1.0 for all estimated recdevs)\n 0 #_period of cycles in recruitment (N parms read below)\n -5 #min rec_dev\n 5 #max rec_dev\n 0 #_read_recdevs\n#_end of advanced SR options\n\nThe advanced options allow the user to bias adjust the recruitment deviations. There is more on bias adjustment in the SS3 user manual, but the general idea is to account for the fact that earlier and later recruitment deviations likely have less information informing them than the ones in the middle. The bias adjustment ramp accounts for this and is typically “tuned” by looking at bias ramp in the model results after it is run, re-specifying the bias ramp as needed, and rerunning the model.\nFishing mortality info is next specified:\n\n#Fishing Mortality info \n0.3 # F ballpark\n-2001 # F ballpark year (neg value to disable)\n3 # F_Method:  1=Pope; 2=instan. F; 3=hybrid (hybrid is recommended)\n2.95 # max F or harvest rate, depends on F_Method\n# no additional F input needed for Fmethod 1\n# if Fmethod=2; read overall start F value; overall phase; N detailed inputs to read\n# if Fmethod=3; read N iterations for tuning for Fmethod 3\n4  # N iterations for tuning F in hybrid method (recommend 3 to 7)\n\nThere are no particular special settings for fishing mortality information for this model, but note that the recommended hybrid \\(F\\) method is used.\nCatchability setup and parameter lines follow fishing mortality info:\n\n#_Q_setup for fleets with cpue or survey data\n#_1:  fleet number\n#_2:  link type: (1=simple q, 1 parm; 2=mirror simple q, 1 mirrored parm; 3=q and power, 2 parm; 4=mirror with offset, 2 parm)\n#_3:  extra input for link, i.e. mirror fleet# or dev index number\n#_4:  0/1 to select extra sd parameter\n#_5:  0/1 for biasadj or not\n#_6:  0/1 to float\n#_   fleet      link link_info  extra_se   biasadj     float  #  fleetname\n         2         1         0         1         0         0  #  SURVEY1\n         3         1         0         0         0         0  #  SURVEY2\n-9999 0 0 0 0 0\n#\n#_Q_parms(if_any);Qunits_are_ln(q)\n#_ LO HI INIT PRIOR PR_SD PR_type PHASE env-var use_dev dev_mnyr dev_mxyr dev_PH Block Blk_Fxn # parm_name\n   -7 5   0.516018 0    1 0  1 0 0 0 0 0 0 0  #  LnQ_base_SURVEY1(2)\n    0 0.5 0        0.05 1 0 -4 0 0 0 0 0 0 0  #  Q_extraSD_SURVEY1(2)\n   -7 5   -6.6281  0    1 0  1 0 0 0 0 0 0 0  #  LnQ_base_SURVEY2(3)\n\nBecause the fishery is not used as an index of abundance, it does not require any catchability setup lines or parameters. Note that the log scale (LNQ) catchability parameters are both estimated for the surveys. Also, for fleet 2 in the setup lines, it was specified to used extra standard error, so there is an extraSD fixed value specified as a parameter line.\nSelectivity comes next. First, the size and age selectivity setup lines:\n\n#_size_selex_patterns\n...\n...\n...\n#_Pattern Discard Male Special\n 1 0 0 0 # 1 FISHERY\n 1 0 0 0 # 2 SURVEY1\n 0 0 0 0 # 3 SURVEY2\n #\n#_age_selex_patterns\n ...\n ...\n ...\n #_Pattern Discard Male Special\n 11 0 0 0 # 1 FISHERY\n 11 0 0 0 # 2 SURVEY1\n 11 0 0 0 # 3 SURVEY2\n\nA selectivity pattern must be specified for both size and age selectivity for each fleet; however, using patterns 0 and 1 for size selectivity allow the user to specify that selectivity is the same across all sizes (within the range specified, if using pattern 1). In this setup, age selectivity pattern 11 (logistic) is used for all of the fleets. The selectivity setup lines are followed by the selectivity parameter lines:\n\n#_          LO            HI          INIT         PRIOR         PR_SD       PR_type      PHASE    env-var    use_dev   dev_mnyr   dev_mxyr     dev_PH      Block    Blk_Fxn  #  parm_name\n# 1   FISHERY LenSelex\n            19            80       53.6411            50          0.01             1          2          0          0          0          0          0          0          0  #  Size_inflection_FISHERY(1)\n          0.01            60       18.9232            15          0.01             1          3          0          0          0          0          0          0          0  #  Size_95%width_FISHERY(1)\n# 2   SURVEY1 LenSelex\n            19            70        36.653            30          0.01             1          2          0          0          0          0          0          0          0  #  Size_inflection_SURVEY1(2)\n          0.01            60       6.59179            10          0.01             1          3          0          0          0          0          0          0          0  #  Size_95%width_SURVEY1(2)\n# 3   SURVEY2 LenSelex\n# 1   FISHERY AgeSelex\n             0            40             0             5            99             0         -1          0          0          0          0          0          0          0  #  minage@sel=1_FISHERY(1)\n             0            40            40             6            99             0         -1          0          0          0          0          0          0          0  #  maxage@sel=1_FISHERY(1)\n# 2   SURVEY1 AgeSelex\n             0            40             0             5            99             0         -1          0          0          0          0          0          0          0  #  minage@sel=1_SURVEY1(2)\n             0            40            40             6            99             0         -1          0          0          0          0          0          0          0  #  maxage@sel=1_SURVEY1(2)\n# 3   SURVEY2 AgeSelex\n             0            40             0             5            99             0         -1          0          0          0          0          0          0          0  #  minage@sel=1_SURVEY2(3)\n             0            40             0             6            99             0         -1          0          0          0          0          0          0          0  #  maxage@sel=1_SURVEY2(3)\n#_no timevary selex parameters\n#\n\nThese parameter lines are specified in order, with the size (or length) selectivity lines specified before the age selectivity lines and the fleets in the same order as in the setup lines. Also, the selectivity pattern used determines the number of parameters needed to specify each fleets’ size or age selectivity.\nSome special features (2DAR selectivity, tagging data, variance adjustment, lambdas, and additional standard deviation reporting) in the control file are turned off for this model:\n\n0   #  use 2D_AR1 selectivity(0/1):  experimental feature\n#_no 2D_AR1 selex offset used\n#\n# Tag loss and Tag reporting parameters go next\n0  # TG_custom:  0=no read and autogen if tag data exist; 1=read\n...\n# Input variance adjustments factors: \n...\n#_Factor  Fleet  Value\n -9999   1    0  # terminator\n#\n4 #_maxlambdaphase\n1 #_sd_offset; must be 1 if any growthCV, sigmaR, or survey extraSD is an estimated parameter\n...\n#like_comp fleet  phase  value  sizefreq_method\n-9999  1  1  1  1  #  terminator\n#\n0 # (0/1) read specs for more stddev reporting \n\nVariance adjustment factors and/or lambdas can be used for data weighting, but in this case they have not yet been used. The control file then ends with 999 so that SS3 knows it can stop reading:\n\n999"
  },
  {
    "objectID": "qmds/model_tutorial.html#checks-for-convergence",
    "href": "qmds/model_tutorial.html#checks-for-convergence",
    "title": "Model building tutorial",
    "section": "Checks for convergence",
    "text": "Checks for convergence\nAfter running the model, open the warning.sso file to check for any warnings from Stock Synthesis. This file shows no warnings:\n\n N warnings: 0\nNumber_of_active_parameters_on_or_near_bounds: 0\n\nwhich suggests that the model is not misspecified in a way that SS3 knows to warn about.\nNext, we want to quickly check for any evidence that the model did not converge. In Report.sso, underneath information about the data file and control file names is information about the convergence level:\n\nConvergence_Level: 2.14568e-005 is_final_gradient\n\nThe convergence criteria is set in the starter.ss file before the run, and is typically 0.0001. In this case, the final gradient is smaller than the convergence criteria, so this suggests (but does not guarantee) that the model has converged.\nWe also want to check that there are no estimated parameters on bounds, which can also be done in the Report.sso file. Further down in Report.sso (around line 272), should be a line that tells how many active (i.e., estimated) parameters were on bounds:\n\nNumber_of_active_parameters_on_or_near_bounds: 0\nActive_count 54\n\nIf there were any parameters on bounds, the analyst would need to decide if the bounds on the parameter are appropriate or not and consider expanding the bounds or fixing the parameter (if there is not enough information informing the parameter estimate, fixing it may be necessary)."
  },
  {
    "objectID": "qmds/model_tutorial.html#check-that-the-hessian-inverted",
    "href": "qmds/model_tutorial.html#check-that-the-hessian-inverted",
    "title": "Model building tutorial",
    "section": "Check that the Hessian inverted",
    "text": "Check that the Hessian inverted\nChecking if the Hessian inverted is useful, although it is possible to use point estimates from a model for which the Hessian does not invert. To see if the Hessian inverted, look for the presence of the ss.cor file (the first line of which is something like “The logarithm of the determinant of the Hessian = 280.952”) and/or to check the covar.sso file which will contain the text “Variances are 0.0 for first two elements, so do not write” if the Hessian failed to invert."
  },
  {
    "objectID": "qmds/model_tutorial.html#further-convergence-check-jitter-the-start-values",
    "href": "qmds/model_tutorial.html#further-convergence-check-jitter-the-start-values",
    "title": "Model building tutorial",
    "section": "Further convergence check: Jitter the start values",
    "text": "Further convergence check: Jitter the start values\nA common method to have even more confidence that the model has converged is to jitter (i.e., change slightly) the starting values in the model. The {r4ss} function SS_RunJitter() can be used to easily do this.\nTo jitter a mondel, first the amount of jitter and the option to use the .par file should be set in the starter.ss file. Typically, 0.01 is used:\n\n0.1 # jitter initial parm value by this fraction\n\nand option to read the par file in the starter file is set to 1:\n\n1 # 0=use init values in control file; 1=use ss3.par\n\nUsing the .par file from a previous run is useful because starting the model from previous values will speed up the runs.\nThe starter file values can be modified by opening up the starter.ss file and modifying it by hand, or {r4ss} functions can be used to change this within R, as shown in this example from {r4ss}:\n\nlibrary(r4ss)\nstarter &lt;- SS_readstarter(file.path(mydir, 'starter.ss'))\nstarter$init_values_src = 1 # Change to use .par file\n# Change jitter (0.1 is an arbitrary, but common choice for jitter amount)\nstarter$jitter_fraction = 0.1\nSS_writestarter(starter, dir = mydir, overwrite = TRUE) # write modified starter file\n\nNext, the jitter can be run:\n\nSS_RunJitter(mydir = \"simpler\", model = \"ss3\", Njitter = 100)\n\nThe previous code assumes that the model directory mydir is called “simpler”, which is a folder within the working directory. The model argument specifies the name of the ss3 executable, so in this case, it assumes that the SS3 executable is within the “simpler” folder and called “ss3.exe”. Finally, Njitter tells the function how many times to run the function. For west coast stock assessment jitters, 100 runs is a common value to use, but note that the run time is not trivial (it depends on the model, but may take an hour or more to run).\nAfter the jitter is run, the final likelihood values are the most important part of the results to look at. If the original model run has found a global minimum, you would expect all likelihood values from the jitter to be the same or higher than the original model run. If there are any likelihood values that are lower than the original model run, this indicates that the model run did not find a global minimum. Investigating the run or runs with lower likelihood values would be the next step in figuring out what the “final” model run will be.\nTo check on the results of the jitter, code similar to this example code from {r4ss} can be used:\n\n #### Read in results using other r4ss functions\n profilemodels &lt;- SSgetoutput(dirvec = \"simpler\", keyvec=1:100, getcovar=FALSE)\n # summarize output\n profilesummary &lt;- SSsummarize(profilemodels)\n profilesummary$likelihoods[1,]  # Likelihoods\n profilesummary$pars # Parameters"
  },
  {
    "objectID": "qmds/model_tutorial.html#looking-at-model-results",
    "href": "qmds/model_tutorial.html#looking-at-model-results",
    "title": "Model building tutorial",
    "section": "Looking at model results",
    "text": "Looking at model results\nOnce verifying that there is no indication that the model hasn’t converged (although an extensive jittering analysis need not be done at this stage), looking at estimates from the model can be helpful. Perhaps the easiest and quickest way to look at many plots from a model is to use the SS_plots() in {r4ss}. To plot the results, use:\n\noutput &lt;- SS_output(dir = \"simpler\")\nSS_plots(output)\n\nWhen the function is done run running, an HTML window will open up in your browser and you can look through plots quickly to determine if the model “makes sense” or if adjustments need to be made."
  },
  {
    "objectID": "qmds/start_year_considerations.html",
    "href": "qmds/start_year_considerations.html",
    "title": "Start Year Considerations",
    "section": "",
    "text": "The estimated population age composition in the first year of composition data interacts with the structural stiffness (especially asymptotic selectivity) to produce a strong influence on the model result. Therefore, \\(R_{0}\\), initial \\(F\\), and domed selectivity must be considered together."
  },
  {
    "objectID": "qmds/start_year_considerations.html#population-age-composition-in-the-start-year-is-composed-of",
    "href": "qmds/start_year_considerations.html#population-age-composition-in-the-start-year-is-composed-of",
    "title": "Start Year Considerations",
    "section": "Population age composition in the start year is composed of:",
    "text": "Population age composition in the start year is composed of:\n\nAn equilibrium age composition using \\(Z = M + initial F\\)\nAge-specific deviation from that vector for none, to all, of the ages.\n\nThese age deviations are a continuation of the recruitment deviations (devs), but now they are centered around the initial equilibrium age composition, rather than around the spawner-recruitment function.\nBecause the devs are centered around the equilibrium age composition, it is important that the initial \\(F\\) be approximately correct, otherwise a pattern can be introduced in the devs.\nSS3 provides the concept of early_devs, which are not zero-centered, to separate them from the main_rec_devs, which typically are zero-centered (but growing evidence that they should also be free devs)."
  },
  {
    "objectID": "qmds/start_year_considerations.html#start-year-considerations",
    "href": "qmds/start_year_considerations.html#start-year-considerations",
    "title": "Start Year Considerations",
    "section": "Start year considerations",
    "text": "Start year considerations\n\nLong historical period of relatively stable catch\n\nThis is the ideal situation for use of initial equilibrium catch with initial \\(F\\) estimated. Even a low level of catch can have a noticeable impact on the expected occurrence of fish in the plus group if \\(M\\) is low.\nIf that level of catch is moderate, then the most internally consistent approach is to turn on the spawner-recruitment calculations within the initial equilibrium. Note that the ensuing calculation is identical to the MSY calculations. This means that SS3 will always make \\(R_{0}\\) big enough such that MSY is greater than initial equilibrium catch. If you suspect that historical catch reduced biomass below \\(B_{MSY}\\), then it is incorrect to use initial equilibrium approach. Instead, move start year earlier, and included the time series of catches that previously were averaged into the initial equilibrium catch. With this alternative, the time series of catches will be able to create \\(F\\)’s greater than \\(F_{MSY}\\). Also, what was a vector of initial age composition now appears in the model as a vector of recruitments extending further back in time.\n\nSubstantial changes in historical catch levels have occurred within a lifespan before start year\n\nIn this situation, the equilibrium assumption is violated. Better approach is to start earlier and allow estimation of year specific \\(F\\)."
  },
  {
    "objectID": "qmds/start_year_considerations.html#first-year-with-recdevs",
    "href": "qmds/start_year_considerations.html#first-year-with-recdevs",
    "title": "Start Year Considerations",
    "section": "First year with recdevs",
    "text": "First year with recdevs\n\nBy starting rec_devs early (even long before influential data occur) the variability associated with \\(\\sigma R\\) creates variance in the population abundance and this variance can be seen in both recruitment and spawning biomass.\n\n\n\nThe first year with rec_devs (main or early) can be Nages before start year.\nDevs that occur long before the data do not influence the goodness of fit to the data, but the variance of those devs is still important to capture. Use of the early_devs concept is helpful in this situation because they can wait to be turned on in a late phase just to capture that variance.\nThe challenge with this long vector of devs is that the influence of data on the dev estimation gradually increases over time. So some of the devs may show unexpected patterns because of the influence of noise in the early data. Shortening up the number of years with devs may not help because the influence of the data is still there and the model response often will still show up in the first estimated dev.\n\n\n\n\n\n\n\nThink of it as\n\n\n\nHow much of a logL improvement in fit to some early length comp sample is needed to outweigh the logL penalty caused by an early dev moving away from 0.0?"
  },
  {
    "objectID": "qmds/predator.html",
    "href": "qmds/predator.html",
    "title": "Predators",
    "section": "",
    "text": "Model the overall natural mortality (\\(M\\)) to include explicit mortality (\\(M2\\)) caused by each major predator.\n\n\\(M = M1 + sum(M2)\\)\nThe \\(M1\\) is the base and is modeled with the existing M options to allow various approaches to age-specific \\(M1\\)\n\\(M2\\) is expected to be time-varying and can be linked to predator abundance or consumption. It is age/length-specific according to the selectivity of the predator.\n\\(M1\\) should be less than the total \\(M\\) value you were using previously such that \\(M1\\) plus the time-varying \\(M2\\) will be similar to what previously was a constant overall \\(M\\)."
  },
  {
    "objectID": "qmds/predator.html#goal",
    "href": "qmds/predator.html#goal",
    "title": "Predators",
    "section": "",
    "text": "Model the overall natural mortality (\\(M\\)) to include explicit mortality (\\(M2\\)) caused by each major predator.\n\n\\(M = M1 + sum(M2)\\)\nThe \\(M1\\) is the base and is modeled with the existing M options to allow various approaches to age-specific \\(M1\\)\n\\(M2\\) is expected to be time-varying and can be linked to predator abundance or consumption. It is age/length-specific according to the selectivity of the predator.\n\\(M1\\) should be less than the total \\(M\\) value you were using previously such that \\(M1\\) plus the time-varying \\(M2\\) will be similar to what previously was a constant overall \\(M\\)."
  },
  {
    "objectID": "qmds/predator.html#predators-m2",
    "href": "qmds/predator.html#predators-m2",
    "title": "Predators",
    "section": "Predators (\\(M2\\))",
    "text": "Predators (\\(M2\\))\n\nThere can be multiple predators, each adding a \\(M2\\).\nThese are contained in the same arrays as fishing fleets, so \\(M2\\) has available all the code characteristics as a fishing fleet.\nVery little code is specific to predators…yet.\nEach predator will kill fish. \\(M2(f)/Z\\) is the fraction of the total kill that is consumed by predator(\\(f\\)) in a given area*season.\nEach predator will have selectivity (age and/or length) just as any other fleet.\n\nMany predators tend to select smaller fish."
  },
  {
    "objectID": "qmds/predator.html#m2-is-area-specific",
    "href": "qmds/predator.html#m2-is-area-specific",
    "title": "Predators",
    "section": "\\(M2\\) is area-specific",
    "text": "\\(M2\\) is area-specific\n\nIf a predator occurs in multiple areas, they might be named “seals_A1” and “seals_A2” and would have separate data inputs and controls, just like fishing fleets.\nA “fleet” is designated as a predator at the top of the data file.\n#| code-overflow: wrap\n4 #_Nfleets (including surveys)\n#_fleet_type: 1=catch fleet; 2=bycatch only fleet; 3=survey; 4=predator(M2) \n#_sample_timing: -1 for fishing fleet to use season-long catch-at-age for observations, or 1 to use observation month; (always 1 for surveys)\n#_fleet_area:  area the fleet/survey operates in\n#_units of catch:  1=bio; 2=num (ignored for surveys; their units read later)\n#_catch_mult: 0=no; 1=yes\n#_rows are fleets\n#_fleet_type fishery_timing area catch_units need_catch_mult fleetname\n1 -1 1 1 0 Fleet  # 1\n4 -1 1 1 0 Seals  # 2\n3 1 1 2 0 CPUE  # 3\n3 1 1 2 0 Acoustic  # 4\n\n\n\n\n\n\n\nNote\n\n\n\nRetained catch is not entered for predator fleets, nor is there a need to enter placeholder values."
  },
  {
    "objectID": "qmds/predator.html#consumption-by-predators-is-stored-in-discard-arrays",
    "href": "qmds/predator.html#consumption-by-predators-is-stored-in-discard-arrays",
    "title": "Predators",
    "section": "Consumption by predators is stored in discard arrays",
    "text": "Consumption by predators is stored in discard arrays\n\nData on the amount of consumption can be entered as discard data, where SS3 will include it in the estimation of \\(M2\\) values.\n#| code-overflow: wrap\n1 #_N_fleets_with_discard\n#_discard_units (1=same_as_catchunits(bio/num); 2=fraction; 3=numbers)\n#_discard_errtype: &gt;0 for DF of T-dist(read CV below); 0 for normal with CV; -1 for normal with se; -2 for lognormal; -3 for trunc normal with CV\n# note: only enter units and errtype for fleets with discard \n# note: discard data is the total for an entire season, so input of month here must be to a month in that season\n#_Fleet units errtype\n2 1 -2 # Seals\n#_yr month fleet obs stderr\n1980 2.5 2 76 0.2 #_ Seals\n1980 5.5 2 76 0.2 #_ Seals"
  },
  {
    "objectID": "qmds/predator.html#predator-abundance",
    "href": "qmds/predator.html#predator-abundance",
    "title": "Predators",
    "section": "Predator abundance",
    "text": "Predator abundance\n\nThe abundance of the predator is the “fishing effort” this is correlated with the level of \\(M2\\).\nIf the predator abundance is available, it can be entered as a survey of “F”.\nThe format looks like:\n#| code-overflow: wrap\n#_Units:  0=numbers; 1=biomass; 2=F; 30=spawnbio; ……\n#_Errtype:  -1=normal; 0=lognormal; &gt;0=T\n#_SD_Report: 0=no sdreport; 1=enable sdreport\n#_Fleet Units Errtype SD_Report\n1 1 0 0 # fishing_fleet\n2 2 0 0 # pred\nThis triggers the need to specify a catchability for this fleet in the control file.\nNeither consumption data nor predator abundance data is necessary, but they are both helpful in tuning the level and time-variation of \\(M2\\)."
  },
  {
    "objectID": "qmds/predator.html#future-predator-options",
    "href": "qmds/predator.html#future-predator-options",
    "title": "Predators",
    "section": "Future predator options",
    "text": "Future predator options\n\nAdd a new option that is specific to predators\nDevelop specific catchability (e.g., Type 1 vs. Type 2 response for consumption/predator options)."
  },
  {
    "objectID": "qmds/predator.html#m2-parameter-for-each-predator-in-each-season",
    "href": "qmds/predator.html#m2-parameter-for-each-predator-in-each-season",
    "title": "Predators",
    "section": "\\(M2\\) parameter for each predator, in each season",
    "text": "\\(M2\\) parameter for each predator, in each season\n\nThe recommended approach is to set up this parameter to have a mean-reverting random walk over time.\nThe time series of predator consumption (in the discard section), and the series of predator relative abundance (as effort), will inform SS3 about changes in \\(M2\\) over time.\n\nControl file:\n```\n#| code-overflow: wrap\n# M2 parameter for each predator fleet\n0 4 0.180481 0.2 0.8 0 3 0 5 1980 2020 2 1 2 #M2_pred1\n0 10 1 1 1 0 -1 0 0 0 0 0 0 0 # M2_pred1_s1\n0 10 0.936248 1 1 0 4 0 5 1980 2020 4 0 0 #M2_pred1_s2\n0 10 2.71282 1 1 0 4 0 5 1980 2020 4 0 0 #M2_pred1_s3\n0 10 2.83102 1 1 0 4 0 5 1980 2020 4 0 0 #M2_pred1_s4\n#\n# timevary MG parameters \n#_ LO HI INIT PRIOR PR_SD PR_type  PHASE\n1e-05 2.4 1.4368 0.2 0.8 0 3 #M2_pred1_BLK1repl_1964\n0.0001 2 1.7 0.5 0.5 -6 -5 #M2_pred1_dev_se\n-0.99 0.99 0 0 0.5 -6 -6 #M2_pred1_dev_autocorr\n0.0001 2 1.7 0.5 0.5 6 -5 #M2_pred1_s2_dev_se\n-0.99 0.99 0 0 0.5 -6 -6 #M2_pred1_s2_dev_autocorr\n0.0001 2 1.7 0.5 0.5 -6 -5 #M2_pred1_s3_dev_se\n-0.99 0.99 0 0 0.5 -6 -6 # M2_pred1_s3_dev_autocorr\n0.0001 2 1.7 0.5 0.5 -6 -5 #M2_pred1_s4_dev_se\n-0.99 0.99 0 0 0.5 -6 -6 #M2_pred1_s4_dev_autocorr\n```"
  },
  {
    "objectID": "qmds/predator.html#diet-data",
    "href": "qmds/predator.html#diet-data",
    "title": "Predators",
    "section": "Diet data",
    "text": "Diet data\n\nIf diet data with size or age composition of the prey is available, it can be entered in the composition data section where it will inform the estimation of the age/length selectivity of the predator for it’s prey.\nIt should have a retained code of 0 for total kill, not 1 for discard."
  },
  {
    "objectID": "qmds/predator.html#predator-example",
    "href": "qmds/predator.html#predator-example",
    "title": "Predators",
    "section": "Predator example",
    "text": "Predator example\n\n\n Download predator SS3 input files\n\n\n\nExample Info: 4 seasons, and \\(M2\\) can vary by season\n\n\\(M2\\) has a random deviation over time to allow time-varying flexibility.\nThen we add data to inform those deviations.\nIn this example, those data are consumption entered as discard data.\nAn alternative is to enter an indicator (e.g., survey or other indicator of predator abundance) of the level of \\(M2\\) itself.\n\nThis is not done in this example, but would be a survey of Type 2.\nHopefully we can create more meaningful linkages between predators and \\(M2\\) in the future.\n\n\n\n\nData file:\n\nOne fleet is Type 4 and labeled as Pred\nThe section of discard data is used as a place to enter the amount of consumption. This is not necessary, but it does help calibrate the \\(M2\\) levels.\nThe fact that at least one fleet is a predator triggers the need to include \\(M2\\) internal to the SS3 calculations.\n\n\n\nControl file:\n\nThis example has somewhat complex \\(M1\\) pattern by age. This is independent of \\(M2\\) so need not be maintained in your work.\nThe \\(M2\\) parameter setup begins at line 106.\nThe \\(M2\\) parameter has a block to shift it’s value in 1964 and annual deviations.\nIt also is set up to have annual devsiations in the seasonal values of \\(M2\\). There are a lot of parameters. In this case, it works because there is a discard observation for each one. It should still work without all that consumption data because it is a random effect, but let’s talk if you have challenges.\nSS3 also needs to setup the size & age selectivity of the predator\n#| code-overflow: wrap\n#_Pattern Discard Male Special\n24 0 0 0 # 1 Fleet\n24 3 0 0 # 2 Pred\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that the discard flag is “3”. This means that for the predator fleet the data file contains no relevant “retained catch”, so the \\(M2\\) level will only be informing the amount of “discard” which is the predator consumption.\n\n\n\nIn this example, the selectivity of the predator was setup using double normal (Type = 24), but parameters set to essentially be logistic. You can change this as needed.\n\n\n\n\\(M2\\) in Report.sso\n\nIf you search through the Report.sso file for “M2”, you will find the parameter values near the top.\nThe consumption output is in the “Discard” section.\nThe time-series of \\(M2\\) is further down.\n\n\n\nPredator Data\n\n\n\n\n\nFigure 1. {r4ss} data plot showing predator data.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe discard label will appear in the plot because predator consumption is stored internally in the same place as discards."
  },
  {
    "objectID": "qmds/phases.html",
    "href": "qmds/phases.html",
    "title": "Guidance on Phases",
    "section": "",
    "text": "Phases are a way of switching on the estimation of parameters in a specified order. A negative phase means that you are fixing a parameter and it is not estimated, a positive phase means that you want the model to estimate the parameter. Most models use 3 to 5 phases. Parameters that enter in an early stage remain active as other parameters become active.\nYou can spread out when you estimate parameters using phases. In some cases, spreading out/changing phases can speed up your model or help with convergence.\nHow you spread it out is up to you. Below is some general guidance on assigning phases."
  },
  {
    "objectID": "qmds/phases.html#phases-basics",
    "href": "qmds/phases.html#phases-basics",
    "title": "Guidance on Phases",
    "section": "",
    "text": "Phases are a way of switching on the estimation of parameters in a specified order. A negative phase means that you are fixing a parameter and it is not estimated, a positive phase means that you want the model to estimate the parameter. Most models use 3 to 5 phases. Parameters that enter in an early stage remain active as other parameters become active.\nYou can spread out when you estimate parameters using phases. In some cases, spreading out/changing phases can speed up your model or help with convergence.\nHow you spread it out is up to you. Below is some general guidance on assigning phases."
  },
  {
    "objectID": "qmds/phases.html#a-note-about-phases",
    "href": "qmds/phases.html#a-note-about-phases",
    "title": "Guidance on Phases",
    "section": "A Note about Phases",
    "text": "A Note about Phases\nThere is really no one way or even best general way of assigning phases.\nThis general guidance may not accommodate every model or necessarily give you the best model fit. However, it may provide a starting point when initially trying to assign phases to parameters.\nIf you are an experienced SS3 user with additional suggestions for phasing, please let us know by submitting an issue in this repository. We will gladly review and incorporate those into this guidance."
  },
  {
    "objectID": "qmds/phases.html#a-guide-to-parameter-phasing-in-stock-synthesis",
    "href": "qmds/phases.html#a-guide-to-parameter-phasing-in-stock-synthesis",
    "title": "Guidance on Phases",
    "section": "A Guide to Parameter Phasing in Stock Synthesis",
    "text": "A Guide to Parameter Phasing in Stock Synthesis\nThis guide is largely taken from the Stock Assessment Continuum Tool as provided by André Punt\n\nGeneral\n\n** At least one parameter needs to be in phase 1, otherwise the model will crash.**\nGet the scale of the population right first. First estimate the parameter that determines scale in an SS3 model (\\(R_{0}\\) - expected recruitment in an unfished state) in phase 1 and then refine the model fit by adding parameters.\nThe parameters are added at each phase so, for example, the parameters that are estimated in phase 3 are those estimated in phase 2 plus those designated as to be estimated in phase 3.\nThe phasing sequence should not matter but (a) good phasing can speed things up, (b) bad phasing can lead to the estimation being trapped in a local minimum, and (c) jittering™ can help to assess how reliable the final estimates are.\nThe schema below is based on eight phases but, sometimes I will “skip a phase”, e.g. place the other “annual deviations” in phase 9 rather than phase 8 (And estimate no “new” parameters in phase 8) to allow the estimation method to better characterize the parameters estimated in phases 1-7.\nHowever, many models don’t go beyond 5 phases and generally people don’t advise going beyond 10 phases.\n\nAndré’s preferred order:\n\nStart with an “Age-structured Production Model”, estimating \\(R_{0}\\) and catchability, Q.\nAdd recruitment deviations (as these can pick up signals from the age and length data on cohort size) (at this point your model is analogous to JABBA)\nNow estimate the base selectivity [and retention] parameters (enabling this to be refined)\nNow estimate growth\nNow estimate natural mortality, \\(M\\) (if feeling brave!)\nNow estimate steepness, h (h may hit an unrealistic bound, i.e., 0.2 or 1 - if the data are in conflict so be wary)\nNow estimate the other annual deviations (e.g., annual deviations on kappa or age-year deviations on selectivity).\nFinally environmental linkages, e.g., between recruitment and an environmental variable such as temperature.\n\n\n\nOther ways of tackling phases (per Jason Cope)\n\nStart life history parameters (growth and sometimes mortality) estimation in phase 3 or even phase 2.\nLeave selectivity until phases 3 or 4 (after life history) IF you have decent starting values for selectivity already.\n\n\n\nSome additional notes (per Rick Methot)\n\nBe careful with many phases unless you have good initial values for the un-estimated parameters.\nParameters with high correlation usually should be estimated in the same phase, so ADMB can change them in sync.\nExamine your composition data patterns before deciding to estimate recruitment deviations or time-varying selectivity first."
  },
  {
    "objectID": "qmds/getting_started_ss3.html",
    "href": "qmds/getting_started_ss3.html",
    "title": "Getting Started with Stock Synthesis",
    "section": "",
    "text": "Stock Synthesis (SS3) is a statistical fisheries population dynamics modeling framework built in AD Model Builder. This Getting Started Guide introduces users to running SS3. We assume some experience with population dynamics models and a basic understanding of how to use the command line.\nIf you have never used the command line, please see the resources in Appendix 1.\nTo follow along, we recommend downloading the simple example (Instructions for downloading) and the latest release of SS3. Simple is a working SS3 model that runs in less than three minutes and should allow you to experiment with SS3 workflows without having to worry about the model’s contents.\nBy the end of using this guide, you should:\n\nUnderstand the input and output file structure for SS3\nBe able to run an SS3 model via the command line\nUnderstand which tools are available to work with SS3 models\nTroubleshoot basic problems associated with running an SS3 model\n\n\n\n\n\n\nFigure 1. SS3 input and output files, and associated tools. Note that some tools are used with both input and output model files."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#ss3-files-required-inputs",
    "href": "qmds/getting_started_ss3.html#ss3-files-required-inputs",
    "title": "Getting Started with Stock Synthesis",
    "section": "SS3 files: Required inputs",
    "text": "SS3 files: Required inputs\nFour required input files are read by the SS3 executable. Throughout this document, we will refer to the SS3 executable as ss3.exe. Keep in mind that the Linux and Mac versions of SS3 have no file extension (e.g., ss3), and the executable can be renamed by the user as desired (e.g.,ss3.exe, ss_win.exe, ss_3.30.18.exe). These input files are:\n\nstarter.ss: Required file containing file names of the data file and the control file plus other run controls. Must be named starter.ss.\ndata file: File containing model dimensions and the data. The data file can have any name, as specified in the starter file, but typically ends in .ss or .dat.\ncontrol file: File containing set-up for the parameters. The control file can have any name, as specified in the starter file, but typically ends in .ss or .ctl.\nforecast.ss: File containing specifications for reference points and forecasts. Must be named forecast.ss."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#ss3-files-optional-inputs",
    "href": "qmds/getting_started_ss3.html#ss3-files-optional-inputs",
    "title": "Getting Started with Stock Synthesis",
    "section": "SS3 files: Optional inputs",
    "text": "SS3 files: Optional inputs\nThe two optional input files for SS3 are:\n\nss3.par: (previously ss.par) A text file with one line per parameter where order matters. Usually created from a previous model run. This file can provide initial parameter values instead of using the initial values in the control file. The option to use the ss3.par file or the control file for initial parameter values is selected in starter.ss.\nwtatage.ss: File containing empirical input of body weight by fleet and population and empirical fecundity-at-age. The option to use the wtatage.ss file is selected in a line of the control file."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#ss3-output-files",
    "href": "qmds/getting_started_ss3.html#ss3-output-files",
    "title": "Getting Started with Stock Synthesis",
    "section": "SS3 output files",
    "text": "SS3 output files\nMany output text files are created during a model run. The most useful output files can be divided into:\n\nFiles containing results. These files include ss_summary.sso and report.sso that contain model results summarized in different ways.\n.ss_new files. These files echo the SS3 input files, but include standardized comments. The values should be the same as the input files, except for control.ss_new, which updates the initial values to the final estimated values. The .ss_new files can be useful to standardize comments in the input files and can be checked to make sure that SS3 interpreted the inputs as the user intended.\nFiles used for debugging. These files include warnings.sso and echoinput.sso."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#tool-definitions",
    "href": "qmds/getting_started_ss3.html#tool-definitions",
    "title": "Getting Started with Stock Synthesis",
    "section": "Tool definitions",
    "text": "Tool definitions\n\nAny text editor can be used to view and edit SS3 input and output files. Defining a custom syntax highlighting scheme for SS3 files may improve SS3 file readability. Some commonly used text editors include Atom, Emacs, Notepad++, and Sublime Text.\nr4ss: An R package to plot SS3 model results and manipulate SS3 input and output files. Available at: https://github.com/r4ss/r4ss\nSSI: Stock Synthesis Interface (i.e., the SS3 GUI). The latest version of SSI can be downloaded from GitHub. SSI can be used to edit, save, run, and visualize model inputs and outputs. Note that SSI is not maintained for Stock Synthesis versions after v.3.30.21.\nStock Assessment Continuum Tool: Available through github at https://github.com/shcaba/SS-DL-tool, the Stock Assessment Continuum Tool (previously known as the Stock Synthesis Data-limited Tool) is a Shiny-based application that provides an interface to upload catch time-series, age composition, length composition, and abundance index data and define model options within the application, which then writes the Stock Synthesis input files."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#the-one-folder-approach-and-demonstration-of-an-ss3-model-run",
    "href": "qmds/getting_started_ss3.html#the-one-folder-approach-and-demonstration-of-an-ss3-model-run",
    "title": "Getting Started with Stock Synthesis",
    "section": "The one folder approach and demonstration of an SS3 model run",
    "text": "The one folder approach and demonstration of an SS3 model run\nThe one folder approach is so named because the model input files and SS3 executable are in the same folder. The one folder approach is the simplest way to run SS3 via the command line, so we will walk through an example run using this approach.\n\nSetup for the 1 folder approach\nCreate a folder and add:\n\nControl File (Must match name in starter.ss)\nData File (Must match name in starter.ss)\nforecast.ss\nss3.exe\nstarter.ss\nConditional files: wtatage.ss (if doing empirical wt-at-age approach) and/or ss3.par (to continue from a previous run)\n\nFor example, the following image shows what should be included for a model with no conditional files (where the control and data file names specified in starter.ss are control.ss and data.ss, respectively):\n\n\n\nRun SS3\nOnce all of the model files and the SS3 executable are in the same folder, you can open your command window of choice at the location of the model files.\nTo do this, you can typically click to highlight the folder the model files are in, then shift + right click on the same folder and select the option from the menu to open the command line of choice (e.g., Windows Powershell). This should bring up a command window. Then, type ss3 (or other name of the ss3 exe) into the command prompt and hit enter. Note that if you are using Windows Powershell, you will need to type ./ss3.\nThe exact instructions for running SS3 can differ depending on the command window used. If you have trouble, search for resources that describe running an executable for your specific command line.\nIf you still have issues, double-check that you are calling the correct exe name (e.g., you would need to type ss3_win to run an executable called ss3_win.exe.) and that the command line has the correct directory.\nAfter starting the run, you should see output to the command line similar to:\n\nIf the output gets past Estimating…please wait…, then the structure of the SS3 inputs is correct. The volume of information displayed during the run within the command window is controlled in starter.ss file on the line with the comment # run display detail (0,1,2). The 0 setting is the least verbose option, while the 2 setting is the most verbose.\nSS3 always opens and reads files in the same order (starter.ss, data file, forecast.ss, control, then wtatage.ss if using, and finally ss3.par if using), writing to echoinput.sso (a file for debugging runs) and warnings.sso (a file which collects warnings from SS3) as it reads. SS3 inputs are read in order by value, without reference to comments (i.e., anything after # on a line). Linebreaks and whitespace are both treated as separators. Depending on which options are selected, SS3 will expect a particular number of values in a certain order, so failing to provide them will result in errors or at least a different model specification than intended.\nAfter reading, SS3 proceeds immediately to pre-processing the data and creating internal parameter labels. As SS3 executes, it continues to write debugging output to echoinput.sso and warnings to warnings.sso.\nSS3 next goes to the procedure section where iterative parameter changes are made by ADMB to minimize the negative log likelihood. When ADMB achieves convergence, control passes to the sd_phase for calculation of parameter variance (unless –nohess option is specified; See command line options). After the sd_phase, SS3 proceeds to the benchmark and forecast code section and then to final reporting. Output files containing results are typically written to the directory in which the model was run from (except when using this special subfolder option).\nWhen the run completes, SS3 shows !! Run has completed !! and the number of warnings:\n Examine warnings.sso for issues and suggestions, regardless of if the run completed successfully or not. If SS3 exits on error, you will not see the message !! Run has completed !!. Below is an example of a run that exited on error due to invalid inputs:\n\n\n\nExamine the output\n.ss_new files are generated if a model run completes. For more information on the .ss_new files, see the “Output Files” section of the SS3 user manual.\nss_summary.sso files are included with the examples on vlab so that you can compare it with the ss_summary.sso file generated by your model run. You should see similar if not exactly the same values for the likelihood and parameter values if using the same version of SS3.\nOutput from SS3 can be read into {r4ss} or the excel viewer."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#options",
    "href": "qmds/getting_started_ss3.html#options",
    "title": "Getting Started with Stock Synthesis",
    "section": "Command line options",
    "text": "Command line options\nADMB options can be added to the run when calling the SS3 executable from the command line. The most commonly used option is ss3 -nohess to skip standard errors (for quicker results or to get Report.sso if the hessian does not invert).\nTo list all command line options, use one of these calls: SS3-? or SS3 -help. More info about the ADMB command line options is available in the ADMB Manual (Chapter 12: Command line options).\nTo run SS3 without estimation use: ss3 -stopph 0. This will speed up your run by not optimizing. Often -stopph 0 is used with the -nohess option to speed up the run even more. To run SS3 with no estimation in v.3.30.15 and earlier, change the max phase in the starter.ss file to 0 and run the exe with the –nohess option."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#using-ss3.par-previously-ss.par-for-initial-values",
    "href": "qmds/getting_started_ss3.html#using-ss3.par-previously-ss.par-for-initial-values",
    "title": "Getting Started with Stock Synthesis",
    "section": "Using ss3.par (previously ss.par) for initial values",
    "text": "Using ss3.par (previously ss.par) for initial values\nTypically, SS3 uses initial parameter values as specified in the parameter lines of the control file. However, initial values can be read from the ss3.par file (prior to v.3.30.22.1 this was the ss.par file) instead. To use ss3.par, in starter.ss below the names of the data and control files, set the value to 1 rather than 0 on the line with comment:\n# 0=use init values in control file; 1=use ss3.par.\nUsing the ss3.par file is helpful when you want to use different initial values without modifying the control file. An ss3.par file is an output file created during each model run and contains the ending parameter values. Using this ss3.par file from a previous model run with a similar model (that still has the same parameters) will speed up run time because the initial values are likely closer to the maximum likelihood estimation (MLE) parameter estimates."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#using-wtatage.ss",
    "href": "qmds/getting_started_ss3.html#using-wtatage.ss",
    "title": "Getting Started with Stock Synthesis",
    "section": "Using wtatage.ss",
    "text": "Using wtatage.ss\nAs stated in the manual, SS3 has the capability to read empirical body weight at age for the population and each fleet, in lieu of generating these weights internally from the growth parameters, weight-at-length, and size-selectivity. Please see the Empirical Weight-at-Age (wtatage.ss) section of the SS3 user manual for more information on using wtatage.ss with a model. There is also a weight at age SS3 example model available if you would like to try using this feature without having to build your own model."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#using-r4ss-to-organize-and-plot-ss3-output",
    "href": "qmds/getting_started_ss3.html#using-r4ss-to-organize-and-plot-ss3-output",
    "title": "Getting Started with Stock Synthesis",
    "section": "Using r4ss to organize and plot SS3 output",
    "text": "Using r4ss to organize and plot SS3 output\nTo plot the results of an SS3 model after it has run, use:\n\nlibrary(r4ss) # use r4ss package on github\n# create list of quantities for the model in the directory mydir\nreplist &lt;- SS_output(mydir)\nSS_plots(replist)# create plots for SS3 run\n\nSee https://github.com/r4ss/r4ss for {r4ss} installation instructions. {r4ss} includes other functionality for working with SS3 models, see the r4ss vignette for an introduction."
  },
  {
    "objectID": "qmds/getting_started_ss3.html#what-to-do-when-ss3-doesnt-run",
    "href": "qmds/getting_started_ss3.html#what-to-do-when-ss3-doesnt-run",
    "title": "Getting Started with Stock Synthesis",
    "section": "What to do when SS3 doesn’t run",
    "text": "What to do when SS3 doesn’t run\nSome basic checks for when SS3 does not run are:\n\nMake sure that all files and directories are named correctly.\nCheck that starter.ss references the correct names of the control and data files.\nIf SS3 starts to read files and then crashes, check warnings.sso and echoinput.sso. The warnings.sso will reveal potential issues with the model, while echoinput.sso will show how far SS3 was able to run. Work backwards from the bottom of echoinput.sso, looking for where SS3 stopped and if the inputs are being read correctly or not.\n\nFor further information on troubleshooting, please refer to the SS3 User Manual “Running Stock Synthesis” subsections, especially “Re-Starting a Run” and “Debugging Tips”."
  },
  {
    "objectID": "qmds/user_manual.html",
    "href": "qmds/user_manual.html",
    "title": "Citing the SS3 User Manual",
    "section": "",
    "text": "The latest release of the Stock Synthesis user manual can be found under “SS3 User Manuals” in the navigation bar at the top of this page. Additionally, links to the html and pdf versions of the user manual are below: - HTML Version of the SS3 User Manual - PDF Version of the SS3 User Manual (downloads on click)\nPrevious releases of the SS3 user manual (v.3.30.17 - latest) can be found under Releases on the ss3-doc GitHub page. Versions of the SS3 user manual prior to v.3.30.17 are available on the vlab site.\nPlease cite the manual as:\n#| code-overflow: wrap\nMethot, R. D., Jr., C. R. Wetzel, I. G. Taylor, and K. Doering. 2020. Stock Synthesis User \nManual Version 3.30.15. U.S. Department of Commerce, NOAA Processed Report \nNMFS-NWFSC-PR-2020-05. https://doi.org/10.25923/5wpn-qt71\nThe following BibTeX entry can be copied and used in a .bib file:\n@techreport{methot2020stock,\n  title={Stock Synthesis User Manual: Version 3.30.15},\n  author={Methot, Richard Donald and Wetzel, Chantel R and Taylor, Ian G and Doering, Kathryn L},\n  year={2020}, \n  institution={U.S. Department of Commerce},\n  type={NOAA Processed Report Series NMFS-NWFSC-PR-2020-05},\n  doi={10.25923/5wpn-qt71},\n}"
  },
  {
    "objectID": "qmds/user_manual.html#how-to-cite-the-stock-synthesis-user-manual",
    "href": "qmds/user_manual.html#how-to-cite-the-stock-synthesis-user-manual",
    "title": "Citing the SS3 User Manual",
    "section": "",
    "text": "The latest release of the Stock Synthesis user manual can be found under “SS3 User Manuals” in the navigation bar at the top of this page. Additionally, links to the html and pdf versions of the user manual are below: - HTML Version of the SS3 User Manual - PDF Version of the SS3 User Manual (downloads on click)\nPrevious releases of the SS3 user manual (v.3.30.17 - latest) can be found under Releases on the ss3-doc GitHub page. Versions of the SS3 user manual prior to v.3.30.17 are available on the vlab site.\nPlease cite the manual as:\n#| code-overflow: wrap\nMethot, R. D., Jr., C. R. Wetzel, I. G. Taylor, and K. Doering. 2020. Stock Synthesis User \nManual Version 3.30.15. U.S. Department of Commerce, NOAA Processed Report \nNMFS-NWFSC-PR-2020-05. https://doi.org/10.25923/5wpn-qt71\nThe following BibTeX entry can be copied and used in a .bib file:\n@techreport{methot2020stock,\n  title={Stock Synthesis User Manual: Version 3.30.15},\n  author={Methot, Richard Donald and Wetzel, Chantel R and Taylor, Ian G and Doering, Kathryn L},\n  year={2020}, \n  institution={U.S. Department of Commerce},\n  type={NOAA Processed Report Series NMFS-NWFSC-PR-2020-05},\n  doi={10.25923/5wpn-qt71},\n}"
  },
  {
    "objectID": "qmds/platoons.html",
    "href": "qmds/platoons.html",
    "title": "Platoons",
    "section": "",
    "text": "This presentation was given at the 2023 PICES Meeting by Rick Methot about the usage of platoons in SS3."
  },
  {
    "objectID": "qmds/platoons.html#platoons-presentation",
    "href": "qmds/platoons.html#platoons-presentation",
    "title": "Platoons",
    "section": "",
    "text": "This presentation was given at the 2023 PICES Meeting by Rick Methot about the usage of platoons in SS3."
  }
]